"""
üëÅÔ∏è Agent Vision MCP R√©el
========================

Agent de traitement d'images avec reconnaissance de documents sensibles.
"""

import asyncio
import json
import logging
import os
import sys
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime
from dataclasses import dataclass
from PIL import Image, ImageStat
import base64

# Ajout du r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))

try:
    from mcp.server.fastmcp import FastMCP
    from pydantic import BaseModel
    MCP_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è MCP non disponible pour Agent Vision")
    MCP_AVAILABLE = False

from config import Config

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format=Config.LOG_FORMAT,
    handlers=[
        logging.FileHandler(Config.LOGS_DIR / "agent_vision.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DetectedObject(BaseModel):
    """Objet d√©tect√© dans l'image"""
    type: str
    confidence: float
    description: str

class VisionAnalysisResult(BaseModel):
    """R√©sultat d'analyse d'image"""
    file_path: str
    summary: str
    warning: bool
    detected_objects: List[DetectedObject]
    is_sensitive_document: bool
    image_properties: Dict[str, Any]
    processing_time: float
    metadata: Dict[str, Any]

class RealVisionAgent:
    """Agent Vision r√©el pour l'analyse d'images"""
    
    def __init__(self):
        self.agent_name = "vision"
        self.supported_extensions = Config.IMAGE_EXTENSIONS
        
        # Mots-cl√©s de documents sensibles
        self.sensitive_keywords = [
            "carte", "vitale", "identite", "passeport", "permis", "conduire",
            "national", "cni", "secu", "social", "bancaire", "credit",
            "medical", "ordonnance", "facture", "document", "officiel"
        ]
        
        # Patterns visuels basiques pour la d√©tection
        self.document_indicators = {
            "carte_vitale": ["vert", "carte", "vitale", "secu"],
            "carte_identite": ["cni", "republique", "francaise", "identite"],
            "passeport": ["passeport", "passport", "republic"],
            "permis_conduire": ["permis", "conduire", "prefecture"],
            "document_bancaire": ["iban", "rib", "banque", "compte"]
        }
        
        logger.info(f"üëÅÔ∏è Agent Vision MCP R√©el initialis√©")
    
    def analyze_image_properties(self, image_path: str) -> Dict[str, Any]:
        """Analyser les propri√©t√©s de base de l'image"""
        try:
            with Image.open(image_path) as img:
                width, height = img.size
                mode = img.mode
                format_img = img.format
                
                # Statistiques de couleur
                if mode in ['RGB', 'RGBA']:
                    stat = ImageStat.Stat(img)
                    avg_colors = stat.mean
                else:
                    avg_colors = [0, 0, 0]
                
                return {
                    "width": width,
                    "height": height,
                    "mode": mode,
                    "format": format_img,
                    "aspect_ratio": round(width / height, 2),
                    "total_pixels": width * height,
                    "average_colors": avg_colors[:3]  # RGB seulement
                }
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse propri√©t√©s image {image_path}: {e}")
            return {"error": str(e)}
    
    def detect_sensitive_document_by_filename(self, file_path: str) -> tuple[bool, str, float]:
        """D√©tection bas√©e sur le nom de fichier"""
        filename = Path(file_path).name.lower()
        
        for doc_type, keywords in self.document_indicators.items():
            for keyword in keywords:
                if keyword in filename:
                    return True, doc_type, 0.8
        
        # V√©rification g√©n√©rale
        for keyword in self.sensitive_keywords:
            if keyword in filename:
                return True, "document_sensible", 0.6
        
        return False, "document_normal", 0.1
    
    def detect_document_by_colors(self, properties: Dict[str, Any]) -> tuple[bool, str, float]:
        """D√©tection basique par analyse des couleurs"""
        try:
            avg_colors = properties.get("average_colors", [0, 0, 0])
            r, g, b = avg_colors[0], avg_colors[1], avg_colors[2]
            
            # Carte vitale (dominante verte)
            if g > r * 1.2 and g > b * 1.2 and g > 100:
                return True, "carte_vitale_possible", 0.7
            
            # Document officiel (beaucoup de blanc/bleu)
            if r > 200 and g > 200 and b > 200:  # Blanc dominant
                return True, "document_officiel_possible", 0.5
            
            # Carte d'identit√© (couleurs sp√©cifiques)
            if abs(r - 150) < 30 and abs(g - 150) < 30 and abs(b - 200) < 30:
                return True, "carte_identite_possible", 0.6
            
            return False, "image_normale", 0.2
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse couleurs: {e}")
            return False, "analyse_impossible", 0.0
    
    def detect_document_by_aspect_ratio(self, properties: Dict[str, Any]) -> tuple[bool, str, float]:
        """D√©tection par ratio d'aspect (format carte, A4, etc.)"""
        try:
            aspect_ratio = properties.get("aspect_ratio", 1.0)
            
            # Format carte de cr√©dit/vitale (1.586)
            if 1.5 <= aspect_ratio <= 1.7:
                return True, "format_carte", 0.6
            
            # Format A4 ou document (1.414)
            if 1.3 <= aspect_ratio <= 1.5:
                return True, "format_document", 0.5
            
            # Format passeport/carr√©
            if 0.8 <= aspect_ratio <= 1.2:
                return True, "format_passeport", 0.4
            
            return False, "format_non_document", 0.1
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse ratio: {e}")
            return False, "analyse_impossible", 0.0
    
    async def analyze_image(self, file_path: str, file_type: str = None, mime_type: str = None, size: int = None) -> VisionAnalysisResult:
        """Analyser une image pour d√©tecter des documents sensibles"""
        start_time = datetime.now()
        logger.info(f"üëÅÔ∏è Analyse Vision d√©marr√©e: {Path(file_path).name}")
        
        try:
            # 1. Analyser les propri√©t√©s de l'image
            properties = self.analyze_image_properties(file_path)
            
            if "error" in properties:
                raise Exception(f"Impossible d'analyser l'image: {properties['error']}")
            
            # 2. D√©tections multiples
            detections = []
            is_sensitive = False
            max_confidence = 0.0
            
            # D√©tection par nom de fichier
            sens_filename, type_filename, conf_filename = self.detect_sensitive_document_by_filename(file_path)
            if sens_filename:
                is_sensitive = True
                max_confidence = max(max_confidence, conf_filename)
                detections.append(DetectedObject(
                    type=type_filename,
                    confidence=conf_filename,
                    description=f"D√©tect√© par nom de fichier: {type_filename}"
                ))
            
            # D√©tection par couleurs
            sens_colors, type_colors, conf_colors = self.detect_document_by_colors(properties)
            if sens_colors:
                is_sensitive = True
                max_confidence = max(max_confidence, conf_colors)
                detections.append(DetectedObject(
                    type=type_colors,
                    confidence=conf_colors,
                    description=f"D√©tect√© par analyse couleur: {type_colors}"
                ))
            
            # D√©tection par ratio
            sens_ratio, type_ratio, conf_ratio = self.detect_document_by_aspect_ratio(properties)
            if sens_ratio:
                is_sensitive = True
                max_confidence = max(max_confidence, conf_ratio)
                detections.append(DetectedObject(
                    type=type_ratio,
                    confidence=conf_ratio,
                    description=f"D√©tect√© par format: {type_ratio}"
                ))
            
            # Si aucune d√©tection sp√©cifique, ajouter une d√©tection g√©n√©rale
            if not detections:
                detections.append(DetectedObject(
                    type="image_standard",
                    confidence=0.9,
                    description="Image analys√©e sans d√©tection de document sensible"
                ))
            
            # 3. G√©n√©rer le r√©sum√©
            filename = Path(file_path).name
            if is_sensitive:
                summary = f"‚ö†Ô∏è Document sensible d√©tect√© dans {filename} - Confiance: {max_confidence:.2f}"
            else:
                summary = f"Image standard analys√©e: {filename}"
            
            processing_time = (datetime.now() - start_time).total_seconds()
            
            result = VisionAnalysisResult(
                file_path=file_path,
                summary=summary,
                warning=is_sensitive,
                detected_objects=detections,
                is_sensitive_document=is_sensitive,
                image_properties=properties,
                processing_time=processing_time,
                metadata={
                    'file_size': size or 0,
                    'mime_type': mime_type or 'image/unknown',
                    'detection_methods': ['filename', 'colors', 'aspect_ratio'],
                    'max_confidence': max_confidence,
                    'total_detections': len(detections)
                }
            )
            
            logger.info(f"‚úÖ Vision termin√©: {filename} - Sensible: {is_sensitive} - Confiance: {max_confidence:.2f}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse Vision {file_path}: {e}")
            processing_time = (datetime.now() - start_time).total_seconds()
            
            return VisionAnalysisResult(
                file_path=file_path,
                summary=f"Erreur d'analyse: {e}",
                warning=False,
                detected_objects=[],
                is_sensitive_document=False,
                image_properties={},
                processing_time=processing_time,
                metadata={'error': str(e)}
            )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Serveur MCP pour l'Agent Vision
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Instance globale de l'agent
vision_agent = RealVisionAgent()

if MCP_AVAILABLE:
    # Serveur MCP
    mcp = FastMCP("Agent Vision MCP R√©el")

    @mcp.tool()
    async def analyze_image(file_path: str, file_type: str = None, mime_type: str = None, size: int = None) -> dict:
        """Analyser une image pour d√©tecter des documents sensibles"""
        result = await vision_agent.analyze_image(file_path, file_type, mime_type, size)
        return result.dict()

    @mcp.tool()
    async def get_agent_status() -> dict:
        """Obtenir le statut de l'agent Vision"""
        return {
            "agent_name": vision_agent.agent_name,
            "supported_extensions": vision_agent.supported_extensions,
            "sensitive_keywords": vision_agent.sensitive_keywords
        }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Interface CLI et serveur HTTP simple
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn

class ImageAnalysisRequest(BaseModel):
    file_path: str
    file_type: Optional[str] = None
    mime_type: Optional[str] = None
    size: Optional[int] = None

# API HTTP pour la compatibilit√©
app = FastAPI(title="Agent Vision MCP R√©el", version="1.0.0")

@app.post("/analyze_file")
async def api_analyze_file(request: ImageAnalysisRequest):
    """Endpoint HTTP pour l'analyse d'images"""
    try:
        result = await vision_agent.analyze_image(
            request.file_path, 
            request.file_type, 
            request.mime_type, 
            request.size
        )
        
        # Compatibilit√© avec le format orchestrateur
        return {
            "file_path": result.file_path,
            "summary": result.summary,
            "warning": result.warning,
            "metadata": result.metadata
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Check de sant√© de l'agent"""
    return {
        "status": "healthy",
        "agent": "vision"
    }

async def main():
    """Interface principale pour l'agent Vision"""
    if len(sys.argv) < 2:
        print("D√©marrage du serveur Agent Vision sur le port 8003...")
        config = uvicorn.Config(app, host="0.0.0.0", port=8003, log_level="info")
        server = uvicorn.Server(config)
        await server.serve()
    else:
        # Mode CLI pour test direct
        file_path = sys.argv[1]
        if not Path(file_path).exists():
            print(f"‚ùå Fichier non trouv√©: {file_path}")
            sys.exit(1)
        
        result = await vision_agent.analyze_image(file_path)
        print(json.dumps(result.dict(), indent=2, ensure_ascii=False))

if __name__ == "__main__":
    if MCP_AVAILABLE:
        # Mode serveur MCP
        mcp.run()
    else:
        # Mode serveur HTTP
        asyncio.run(main())
