#!/usr/bin/env python3
"""
üöÄ Lancement Rapide - Syst√®me MCP Multi-Agents
=============================================

Script de lancement rapide avec menu pour toutes les fonctionnalit√©s.
"""

import os
import sys
import subprocess
from pathlib import Path

class QuickLauncher:
    """Lanceur rapide pour le syst√®me MCP"""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent
        
    def print_banner(self):
        """Banni√®re principale"""
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                  ‚ïë
‚ïë      üöÄ SYST√àME MCP MULTI-AGENTS - LANCEMENT RAPIDE üöÄ           ‚ïë
‚ïë                                                                  ‚ïë
‚ïë      üéØ KACM Qualcomm Track                                      ‚ïë
‚ïë      ü§ñ 6 Agents Sp√©cialis√©s + IA Ollama/Llama                  ‚ïë
‚ïë      üîê D√©tection PII + S√©curisation Automatique                ‚ïë
‚ïë                                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
    
    def print_menu(self):
        """Menu principal"""
        print("=" * 70)
        print("üéØ MENU PRINCIPAL")
        print("=" * 70)
        print()
        print("üìä GESTION DU SYST√àME:")
        print("  1. üöÄ D√©marrer tous les agents")
        print("  2. üõë Arr√™ter tous les agents")
        print("  3. üè• V√©rifier la sant√© du syst√®me")
        print("  4. üìã Statut des agents")
        print()
        print("üß™ TESTS ET D√âMONSTRATIONS:")
        print("  5. üé¨ D√©monstration automatique compl√®te")
        print("  6. üéØ Interface interactive avec Ollama")
        print("  7. ‚ö° Test rapide du workflow")
        print("  8. üß™ Test d'un fichier sp√©cifique")
        print()
        print("üìö DOCUMENTATION ET AIDE:")
        print("  9. üìñ Voir la documentation")
        print(" 10. üîß V√©rifier les pr√©requis")
        print(" 11. üìÅ Explorer les fichiers de test")
        print()
        print("  0. üö™ Quitter")
        print()
        print("=" * 70)
    
    def check_prerequisites(self):
        """V√©rifier les pr√©requis"""
        print("\nüîç V√©rification des pr√©requis...")
        
        # Python
        python_version = sys.version_info
        if python_version >= (3, 9):
            print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
        else:
            print(f"‚ùå Python {python_version.major}.{python_version.minor} (requis: 3.9+)")
        
        # Ollama
        try:
            result = subprocess.run(["ollama", "list"], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Ollama install√©")
                if "llama3.2:1b" in result.stdout:
                    print("‚úÖ Mod√®le Llama 3.2:1b disponible")
                else:
                    print("‚ö†Ô∏è Mod√®le Llama 3.2:1b non trouv√©")
                    print("   Installez avec: ollama pull llama3.2:1b")
            else:
                print("‚ùå Ollama non trouv√©")
        except FileNotFoundError:
            print("‚ùå Ollama non install√©")
            print("   Installez depuis: https://ollama.ai/download")
        
        # D√©pendances Python
        try:
            import mcp
            import fastmcp
            import requests
            import pydantic
            print("‚úÖ D√©pendances Python install√©es")
        except ImportError as e:
            print(f"‚ùå D√©pendances manquantes: {e}")
            print("   Installez avec: pip install -r requirements.txt")
        
        # Structure des fichiers
        agents_dir = self.base_dir / "agents"
        if agents_dir.exists():
            agents = list(agents_dir.glob("agent_*_mcp.py"))
            print(f"‚úÖ {len(agents)} agents trouv√©s")
        else:
            print("‚ùå R√©pertoire agents/ non trouv√©")
        
        data_dir = self.base_dir / "data" / "test_files"
        if data_dir.exists():
            files = list(data_dir.glob("*"))
            print(f"‚úÖ {len(files)} fichiers de test trouv√©s")
        else:
            print("‚ùå Fichiers de test non trouv√©s")
    
    def run_command(self, command: list, description: str):
        """Ex√©cuter une commande"""
        print(f"\n{description}...")
        try:
            result = subprocess.run(command, cwd=str(self.base_dir), check=True)
            print("‚úÖ Termin√© avec succ√®s")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur: {e}")
            return False
        except FileNotFoundError:
            print(f"‚ùå Commande non trouv√©e: {' '.join(command)}")
            return False
    
    def explore_test_files(self):
        """Explorer les fichiers de test"""
        print("\nüìÅ Fichiers de test disponibles:")
        
        data_dir = self.base_dir / "data" / "test_files"
        if not data_dir.exists():
            print("‚ùå R√©pertoire de test non trouv√©!")
            return
        
        files = list(data_dir.glob("*"))
        if not files:
            print("‚ùå Aucun fichier de test trouv√©!")
            return
        
        print()
        for i, file in enumerate(files, 1):
            if file.is_file():
                size = file.stat().st_size
                # Indiquer le type de contenu
                content_type = "üìÑ Texte"
                if file.suffix.lower() in ['.json']:
                    content_type = "üìã JSON"
                elif file.suffix.lower() in ['.csv']:
                    content_type = "üìä CSV"
                elif file.suffix.lower() in ['.md']:
                    content_type = "üìù Markdown"
                elif 'jpg' in file.name.lower() or 'png' in file.name.lower():
                    content_type = "üñºÔ∏è Image"
                elif 'mp3' in file.name.lower() or 'wav' in file.name.lower():
                    content_type = "üîä Audio"
                
                # Indiquer si sensible
                sensitive = ""
                if any(word in file.name.lower() for word in ['pii', 'confidential', 'carte_identite', 'reunion']):
                    sensitive = " üî¥"
                
                print(f"  {i:2d}. {content_type} {file.name:<25} ({size:,} bytes){sensitive}")
        
        print(f"\nüî¥ = Fichier potentiellement sensible")
        print(f"Total: {len(files)} fichiers")
    
    def show_documentation(self):
        """Afficher la documentation"""
        print("\nüìñ Documentation du syst√®me:")
        print()
        print("üìÅ Fichiers de documentation:")
        print("  ‚Ä¢ README.md - Guide complet du syst√®me")
        print("  ‚Ä¢ config.py - Configuration des agents")
        print("  ‚Ä¢ requirements.txt - D√©pendances Python")
        print()
        print("üéØ Scripts principaux:")
        print("  ‚Ä¢ system_manager.py - Gestion des agents")
        print("  ‚Ä¢ interactive_interface.py - Interface compl√®te")
        print("  ‚Ä¢ auto_demo.py - D√©monstration automatique")
        print("  ‚Ä¢ test_interface.py - Tests de workflow")
        print()
        print("ü§ñ Agents disponibles:")
        print("  ‚Ä¢ agent_orchestrator_mcp.py - Coordination g√©n√©rale")
        print("  ‚Ä¢ agent_nlp_mcp.py - Analyse de texte + IA")
        print("  ‚Ä¢ agent_vision_mcp.py - Traitement d'images")
        print("  ‚Ä¢ agent_audio_mcp.py - Analyse audio")
        print("  ‚Ä¢ agent_file_manager_mcp.py - Consolidation")
        print("  ‚Ä¢ agent_security_mcp.py - Chiffrement/s√©curit√©")
        print()
        print("üåê Ports utilis√©s:")
        print("  ‚Ä¢ 8001 - Orchestrateur")
        print("  ‚Ä¢ 8002 - Agent NLP")
        print("  ‚Ä¢ 8003 - Agent Vision")
        print("  ‚Ä¢ 8004 - Agent Audio")
        print("  ‚Ä¢ 8005 - File Manager")
        print("  ‚Ä¢ 8006 - Security Agent")
    
    def run_interactive(self):
        """Boucle interactive principale"""
        while True:
            self.print_banner()
            self.print_menu()
            
            try:
                choice = input("Votre choix: ").strip()
                
                if choice == "1":
                    self.run_command(
                        [sys.executable, "system_manager.py", "start"],
                        "üöÄ D√©marrage de tous les agents"
                    )
                
                elif choice == "2":
                    self.run_command(
                        [sys.executable, "system_manager.py", "stop"],
                        "üõë Arr√™t de tous les agents"
                    )
                
                elif choice == "3":
                    self.run_command(
                        [sys.executable, "system_manager.py", "health"],
                        "üè• V√©rification de la sant√© du syst√®me"
                    )
                
                elif choice == "4":
                    self.run_command(
                        [sys.executable, "system_manager.py", "status"],
                        "üìã Statut des agents"
                    )
                
                elif choice == "5":
                    self.run_command(
                        [sys.executable, "auto_demo.py"],
                        "üé¨ Lancement de la d√©monstration automatique"
                    )
                
                elif choice == "6":
                    self.run_command(
                        [sys.executable, "interactive_interface.py"],
                        "üéØ Lancement de l'interface interactive"
                    )
                
                elif choice == "7":
                    self.run_command(
                        [sys.executable, "test_interface.py", "--workflow"],
                        "‚ö° Test rapide du workflow complet"
                    )
                
                elif choice == "8":
                    self.run_command(
                        [sys.executable, "test_interface.py"],
                        "üß™ Interface de test de fichiers"
                    )
                
                elif choice == "9":
                    self.show_documentation()
                
                elif choice == "10":
                    self.check_prerequisites()
                
                elif choice == "11":
                    self.explore_test_files()
                
                elif choice == "0":
                    print("\nüëã Au revoir!")
                    break
                
                else:
                    print("\n‚ùå Choix invalide!")
                
                if choice != "0":
                    input("\nAppuyez sur Entr√©e pour continuer...")
                    
            except KeyboardInterrupt:
                print("\nüëã Au revoir!")
                break

def main():
    """Point d'entr√©e principal"""
    launcher = QuickLauncher()
    launcher.run_interactive()

if __name__ == "__main__":
    main()
