"""
Interface Desktop Multi-Agent System
===================================

Interface graphique desktop pour le syst√®me multi-agents MCP
- Drag & Drop de dossiers
- Prompt naturel avec Llama3
- Recherche intelligente de fichiers
- Authentification pour fichiers sensibles
- Int√©gration compl√®te avec tous les agents
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog
import customtkinter as ctk
import asyncio
import threading
import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime
import logging

# Configuration CustomTkinter
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MultiAgentDesktopApp:
    """Application Desktop pour le syst√®me multi-agents"""
    
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("ü§ñ Multi-Agent System - KACM Qualcomm Hackathon")
        self.root.geometry("1200x800")
        
        # Variables d'√©tat
        self.current_directory = None
        self.processed_files = {}
        self.vault_files = {}
        self.system_status = "Arr√™t√©"
        
        # Initialisation de l'interface
        self.setup_ui()
        
        # D√©marrage du syst√®me en arri√®re-plan
        self.start_system_thread()
    
    def setup_ui(self):
        """Configuration de l'interface utilisateur"""
        
        # === HEADER ===
        header_frame = ctk.CTkFrame(self.root)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        title_label = ctk.CTkLabel(
            header_frame, 
            text="ü§ñ Multi-Agent System", 
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(side="left", padx=10, pady=10)
        
        # Status
        self.status_label = ctk.CTkLabel(
            header_frame,
            text="üî¥ Syst√®me: Arr√™t√©",
            font=ctk.CTkFont(size=14)
        )
        self.status_label.pack(side="right", padx=10, pady=10)
        
        # === MAIN CONTAINER ===
        main_container = ctk.CTkFrame(self.root)
        main_container.pack(fill="both", expand=True, padx=10, pady=5)
        
        # === LEFT PANEL: DIRECTORY & ACTIONS ===
        left_panel = ctk.CTkFrame(main_container)
        left_panel.pack(side="left", fill="both", expand=True, padx=5, pady=5)
        
        # Directory Selection
        dir_frame = ctk.CTkFrame(left_panel)
        dir_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(dir_frame, text="üìÅ Dossier √† analyser:", font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", padx=10, pady=5)
        
        dir_select_frame = ctk.CTkFrame(dir_frame)
        dir_select_frame.pack(fill="x", padx=10, pady=5)
        
        self.dir_path_var = tk.StringVar()
        self.dir_entry = ctk.CTkEntry(
            dir_select_frame,
            textvariable=self.dir_path_var,
            placeholder_text="Glissez un dossier ici ou cliquez sur Parcourir..."
        )
        self.dir_entry.pack(side="left", fill="x", expand=True, padx=5)
        
        browse_btn = ctk.CTkButton(
            dir_select_frame,
            text="üìÇ Parcourir",
            command=self.browse_directory,
            width=100
        )
        browse_btn.pack(side="right", padx=5)
        
        # Process Button
        self.process_btn = ctk.CTkButton(
            dir_frame,
            text="üöÄ Analyser le Dossier",
            command=self.process_directory,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.process_btn.pack(fill="x", padx=10, pady=10)
        
        # === SMART SEARCH ===
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(search_frame, text="üîç Recherche Intelligente:", font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", padx=10, pady=5)
        
        self.search_entry = ctk.CTkEntry(
            search_frame,
            placeholder_text="Ex: trouve moi le scan de ma carte vitale..."
        )
        self.search_entry.pack(fill="x", padx=10, pady=5)
        
        search_btn = ctk.CTkButton(
            search_frame,
            text="ü§ñ Rechercher avec IA",
            command=self.smart_search,
            height=35
        )
        search_btn.pack(fill="x", padx=10, pady=5)
        
        # === PROGRESS ===
        progress_frame = ctk.CTkFrame(left_panel)
        progress_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(progress_frame, text="üìä Progression:", font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", padx=10, pady=5)
        
        self.progress_bar = ctk.CTkProgressBar(progress_frame)
        self.progress_bar.pack(fill="x", padx=10, pady=5)
        self.progress_bar.set(0)
        
        self.progress_label = ctk.CTkLabel(progress_frame, text="Pr√™t")
        self.progress_label.pack(anchor="w", padx=10, pady=2)
        
        # === RIGHT PANEL: RESULTS ===
        right_panel = ctk.CTkFrame(main_container)
        right_panel.pack(side="right", fill="both", expand=True, padx=5, pady=5)
        
        # Results Header
        results_header = ctk.CTkFrame(right_panel)
        results_header.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(results_header, text="üìã R√©sultats:", font=ctk.CTkFont(size=16, weight="bold")).pack(side="left", padx=10, pady=5)
        
        refresh_btn = ctk.CTkButton(
            results_header,
            text="üîÑ Actualiser",
            command=self.refresh_results,
            width=100
        )
        refresh_btn.pack(side="right", padx=10, pady=5)
        
        # Results Notebook (Tabs)
        self.results_notebook = ctk.CTkTabview(right_panel)
        self.results_notebook.pack(fill="both", expand=True, padx=10, pady=5)
        
        # Tab 1: Fichiers Analys√©s
        self.results_notebook.add("üìÑ Fichiers Analys√©s")
        files_frame = self.results_notebook.tab("üìÑ Fichiers Analys√©s")
        
        self.files_tree = ttk.Treeview(files_frame, columns=("Type", "Statut", "Sensible"), show="tree headings")
        self.files_tree.heading("#0", text="Fichier")
        self.files_tree.heading("Type", text="Type")
        self.files_tree.heading("Statut", text="Statut")
        self.files_tree.heading("Sensible", text="Sensible")
        self.files_tree.pack(fill="both", expand=True, padx=5, pady=5)
        
        # Tab 2: Vault S√©curis√©
        self.results_notebook.add("üîí Vault S√©curis√©")
        vault_frame = self.results_notebook.tab("üîí Vault S√©curis√©")
        
        self.vault_tree = ttk.Treeview(vault_frame, columns=("Date", "Taille"), show="tree headings")
        self.vault_tree.heading("#0", text="Fichier Chiffr√©")
        self.vault_tree.heading("Date", text="Date")
        self.vault_tree.heading("Taille", text="Taille")
        self.vault_tree.pack(fill="both", expand=True, padx=5, pady=5)
        
        # Tab 3: Logs
        self.results_notebook.add("üìù Logs")
        logs_frame = self.results_notebook.tab("üìù Logs")
        
        self.logs_text = ctk.CTkTextbox(logs_frame)
        self.logs_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        # === BOTTOM PANEL: ACTIONS ===
        bottom_panel = ctk.CTkFrame(self.root)
        bottom_panel.pack(fill="x", padx=10, pady=5)
        
        # System Controls
        system_frame = ctk.CTkFrame(bottom_panel)
        system_frame.pack(side="left", fill="x", expand=True, padx=5, pady=5)
        
        ctk.CTkLabel(system_frame, text="‚öôÔ∏è Contr√¥les Syst√®me:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=5)
        
        controls_frame = ctk.CTkFrame(system_frame)
        controls_frame.pack(fill="x", padx=10, pady=5)
        
        start_btn = ctk.CTkButton(controls_frame, text="üü¢ D√©marrer", command=self.start_system, width=100)
        start_btn.pack(side="left", padx=5)
        
        stop_btn = ctk.CTkButton(controls_frame, text="üî¥ Arr√™ter", command=self.stop_system, width=100)
        stop_btn.pack(side="left", padx=5)
        
        status_btn = ctk.CTkButton(controls_frame, text="üìä Statut", command=self.check_status, width=100)
        status_btn.pack(side="left", padx=5)
        
        # === DRAG & DROP ===
        self.setup_drag_drop()
    
    def setup_drag_drop(self):
        """Configuration du drag & drop"""
        # Pour l'instant, on simule avec un clic
        self.root.bind("<Button-1>", self.on_click)
    
    def on_click(self, event):
        """Gestionnaire de clic (simulation drag & drop)"""
        pass
    
    def browse_directory(self):
        """Parcourir et s√©lectionner un dossier"""
        directory = filedialog.askdirectory(title="S√©lectionner un dossier √† analyser")
        if directory:
            self.dir_path_var.set(directory)
            self.current_directory = directory
            self.log_message(f"Dossier s√©lectionn√©: {directory}")
    
    def process_directory(self):
        """Analyser le dossier s√©lectionn√©"""
        if not self.current_directory:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner un dossier d'abord")
            return
        
        self.log_message(f"D√©marrage de l'analyse du dossier: {self.current_directory}")
        self.progress_label.configure(text="Analyse en cours...")
        self.progress_bar.set(0.1)
        
        # Lancement asynchrone du traitement
        threading.Thread(target=self.process_directory_async, daemon=True).start()
    
    def process_directory_async(self):
        """Traitement asynchrone du dossier"""
        try:
            # Simulation du traitement
            steps = ["Scan des fichiers", "Classification", "Analyse NLP", "Analyse Vision", "S√©curisation"]
            
            for i, step in enumerate(steps):
                self.root.after(0, lambda s=step: self.progress_label.configure(text=f"√âtape: {s}"))
                self.root.after(0, lambda p=(i+1)/len(steps): self.progress_bar.set(p))
                
                # Simulation de traitement
                import time
                time.sleep(2)
            
            # Mise √† jour des r√©sultats
            self.root.after(0, self.update_results)
            self.root.after(0, lambda: self.progress_label.configure(text="Analyse termin√©e"))
            self.root.after(0, lambda: self.log_message("Analyse termin√©e avec succ√®s"))
            
        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"Erreur lors de l'analyse: {str(e)}"))
    
    def smart_search(self):
        """Recherche intelligente avec IA"""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showwarning("Attention", "Veuillez entrer une requ√™te de recherche")
            return
        
        self.log_message(f"Recherche IA: {query}")
        
        # Simulation de recherche intelligente
        threading.Thread(target=self.smart_search_async, args=(query,), daemon=True).start()
    
    def smart_search_async(self, query):
        """Recherche asynchrone avec IA"""
        try:
            # Simulation d'analyse IA
            import time
            time.sleep(3)
            
            # R√©sultats simul√©s
            if "carte vitale" in query.lower():
                result = {
                    "type": "sensitive",
                    "file": "scan_carte_vitale.pdf",
                    "location": "vault",
                    "requires_auth": True
                }
            elif "cours" in query.lower():
                result = {
                    "type": "document",
                    "file": "cours_histoire.pdf",
                    "location": "documents",
                    "requires_auth": False
                }
            else:
                result = {
                    "type": "unknown",
                    "message": "Aucun fichier correspondant trouv√©"
                }
            
            self.root.after(0, lambda: self.handle_search_result(result))
            
        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"Erreur lors de la recherche: {str(e)}"))
    
    def handle_search_result(self, result):
        """Traiter le r√©sultat de recherche"""
        if result["type"] == "sensitive":
            # Fichier sensible - demander authentification
            password = simpledialog.askstring(
                "Authentification Requise",
                f"Le fichier '{result['file']}' est chiffr√©.\nVeuillez saisir la phrase de passe:",
                show="*"
            )
            
            if password:
                # V√©rifier le mot de passe et d√©chiffrer
                self.decrypt_and_open_file(result["file"], password)
            else:
                self.log_message("Authentification annul√©e")
        
        elif result["type"] == "document":
            # Fichier normal - ouvrir directement
            self.open_file(result["file"])
        
        else:
            messagebox.showinfo("R√©sultat", result.get("message", "Fichier non trouv√©"))
    
    def decrypt_and_open_file(self, filename, password):
        """D√©chiffrer et ouvrir un fichier sensible"""
        # Simulation du d√©chiffrement
        if password == "mon_secret_ultra_securise_2024":  # Mot de passe correct
            self.log_message(f"D√©chiffrement r√©ussi: {filename}")
            messagebox.showinfo("Succ√®s", f"Fichier d√©chiffr√© avec succ√®s: {filename}")
            # Ici, on ouvrirait le fichier d√©chiffr√©
        else:
            self.log_message(f"√âchec de d√©chiffrement: {filename}")
            messagebox.showerror("Erreur", "Phrase de passe incorrecte")
    
    def open_file(self, filename):
        """Ouvrir un fichier normal"""
        self.log_message(f"Ouverture du fichier: {filename}")
        messagebox.showinfo("Fichier trouv√©", f"Fichier: {filename}\n\nL'ouverture sera impl√©ment√©e ici")
    
    def update_results(self):
        """Mettre √† jour les r√©sultats affich√©s"""
        # Simulation de fichiers analys√©s
        sample_files = [
            ("document1.pdf", "PDF", "Analys√©", "Non"),
            ("carte_vitale.jpg", "Image", "Chiffr√©", "Oui"),
            ("facture.json", "JSON", "Analys√©", "Non"),
            ("photo_id.png", "Image", "Chiffr√©", "Oui")
        ]
        
        # Vider et remplir l'arbre des fichiers
        for item in self.files_tree.get_children():
            self.files_tree.delete(item)
        
        for file_info in sample_files:
            self.files_tree.insert("", "end", text=file_info[0], values=file_info[1:])
        
        # Simulation de fichiers dans le vault
        vault_files = [
            ("carte_vitale_encrypted.vault", "2024-01-15 10:30", "2.3 MB"),
            ("photo_id_encrypted.vault", "2024-01-15 10:31", "1.8 MB")
        ]
        
        # Vider et remplir l'arbre du vault
        for item in self.vault_tree.get_children():
            self.vault_tree.delete(item)
        
        for vault_info in vault_files:
            self.vault_tree.insert("", "end", text=vault_info[0], values=vault_info[1:])
    
    def refresh_results(self):
        """Actualiser les r√©sultats"""
        self.log_message("Actualisation des r√©sultats...")
        self.update_results()
    
    def start_system(self):
        """D√©marrer le syst√®me multi-agents"""
        self.log_message("D√©marrage du syst√®me multi-agents...")
        self.system_status = "D√©marr√©"
        self.status_label.configure(text="üü¢ Syst√®me: D√©marr√©")
        threading.Thread(target=self.start_system_async, daemon=True).start()
    
    def start_system_async(self):
        """D√©marrage asynchrone du syst√®me"""
        try:
            # Simulation du d√©marrage des agents
            agents = ["Orchestrateur", "NLP", "Vision", "Audio", "File Manager", "Security"]
            
            for agent in agents:
                self.root.after(0, lambda a=agent: self.log_message(f"D√©marrage de l'agent {a}..."))
                import time
                time.sleep(1)
            
            self.root.after(0, lambda: self.log_message("Tous les agents sont d√©marr√©s"))
            
        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"Erreur lors du d√©marrage: {str(e)}"))
    
    def stop_system(self):
        """Arr√™ter le syst√®me multi-agents"""
        self.log_message("Arr√™t du syst√®me multi-agents...")
        self.system_status = "Arr√™t√©"
        self.status_label.configure(text="üî¥ Syst√®me: Arr√™t√©")
    
    def check_status(self):
        """V√©rifier le statut du syst√®me"""
        self.log_message(f"Statut du syst√®me: {self.system_status}")
        messagebox.showinfo("Statut Syst√®me", f"Statut actuel: {self.system_status}")
    
    def start_system_thread(self):
        """D√©marrer le thread du syst√®me"""
        self.log_message("Interface pr√™te")
    
    def log_message(self, message):
        """Ajouter un message aux logs"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        # Ajouter au widget de logs
        self.logs_text.insert("end", log_entry)
        self.logs_text.see("end")
        
        # Log √©galement dans la console
        logger.info(message)
    
    def run(self):
        """Lancer l'application"""
        self.log_message("D√©marrage de l'interface Multi-Agent System")
        self.root.mainloop()

def main():
    """Fonction principale"""
    try:
        app = MultiAgentDesktopApp()
        app.run()
    except Exception as e:
        print(f"Erreur lors du d√©marrage de l'application: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
