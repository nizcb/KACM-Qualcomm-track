#!/usr/bin/env python3
"""
Security Agent Core - Agent de s√©curit√© principal
Gestion du chiffrement, d√©chiffrement et vault

Usage:
    python security_agent_core.py test
    from security_agent_core import SecurityAgent
"""

import os
import sys
import sqlite3
import hashlib
import uuid
import secrets
import subprocess
import time
import requests
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any
import json

# FastAPI imports (installation automatique si n√©cessaire)
try:
    from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
    from fastapi.responses import JSONResponse
    from pydantic import BaseModel
    import uvicorn
except ImportError:
    print("üì¶ Installation de FastAPI...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "fastapi", "uvicorn", "python-multipart"])
    from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
    from fastapi.responses import JSONResponse
    from pydantic import BaseModel
    import uvicorn

# Configuration
BASE_DIR = Path(__file__).parent
VAULT_DIR = BASE_DIR / "vault"
ENCRYPTED_DIR = BASE_DIR / "encrypted"
DECRYPTED_DIR = BASE_DIR / "decrypted"

# Cr√©er les r√©pertoires
VAULT_DIR.mkdir(exist_ok=True)
ENCRYPTED_DIR.mkdir(exist_ok=True)
DECRYPTED_DIR.mkdir(exist_ok=True)

VAULT_DB = VAULT_DIR / "vault.db"
SECRET_PHRASE = "mon_secret_ultra_securise_2024"

# ================================
# MOD√àLES API (PYDANTIC)
# ================================

class EncryptRequest(BaseModel):
    file_path: str
    user_id: Optional[str] = "default_user"

class EncryptResponse(BaseModel):
    success: bool
    uuid: Optional[str] = None
    filename: Optional[str] = None
    encrypted_path: Optional[str] = None
    ai_analysis: Optional[str] = None
    message: str

class DecryptRequest(BaseModel):
    vault_uuid: str
    secret_phrase: str
    user_id: Optional[str] = "default_user"

class DecryptResponse(BaseModel):
    success: bool
    filename: Optional[str] = None
    decrypted_path: Optional[str] = None
    ai_explanation: Optional[str] = None
    message: str

class VaultStats(BaseModel):
    total_files: int
    total_size: int
    files: list

class AnalyzeRequest(BaseModel):
    file_path: str
    mode: Optional[str] = "security"  # "security", "content", "full"

class AnalyzeResponse(BaseModel):
    success: bool
    file_path: str
    analysis: Dict[str, Any]
    ai_reasoning: Optional[str] = None
    security_recommendation: str
    message: str

# ================================
# GESTIONNAIRE OLLAMA
# ================================

class OllamaManager:
    """Gestionnaire Ollama pour les explications IA"""
    
    def __init__(self):
        self.model_name = "llama3.2:1b"
        self.ollama_url = "http://localhost:11434"
        self.is_running = False
        
    def check_ollama_installed(self):
        """V√©rifie si Ollama est install√©"""
        try:
            result = subprocess.run(["ollama", "--version"], capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            return False
    
    def install_ollama(self):
        """Installe Ollama"""
        print("üì¶ Installation d'Ollama...")
        try:
            if sys.platform == "darwin":  # macOS
                subprocess.run(["curl", "-fsSL", "https://ollama.com/install.sh", "|", "sh"], shell=True)
            elif sys.platform == "linux":
                subprocess.run(["curl", "-fsSL", "https://ollama.com/install.sh", "|", "sh"], shell=True)
            else:  # Windows
                print("‚ö†Ô∏è  Veuillez installer Ollama manuellement depuis https://ollama.com")
                return False
            return True
        except Exception as e:
            print(f"‚ùå Erreur installation Ollama: {e}")
            return False
    
    def start_ollama(self):
        """D√©marre Ollama"""
        if not self.check_ollama_installed():
            print("‚ö†Ô∏è  Ollama non install√© - fonctionnement sans IA")
            return False
        
        try:
            # D√©marrer Ollama en arri√®re-plan
            subprocess.Popen(["ollama", "serve"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            time.sleep(3)  # Attendre le d√©marrage
            
            # V√©rifier si le mod√®le est disponible
            self.pull_model()
            self.is_running = True
            print("‚úÖ Ollama d√©marr√© avec succ√®s")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  Ollama non disponible - fonctionnement sans IA: {e}")
            return False
    
    def pull_model(self):
        """T√©l√©charge le mod√®le Llama 3.2"""
        try:
            print(f"üì• T√©l√©chargement du mod√®le {self.model_name}...")
            subprocess.run(["ollama", "pull", self.model_name], check=True)
            print("‚úÖ Mod√®le t√©l√©charg√©")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur t√©l√©chargement mod√®le: {e}")
    
    def generate_explanation(self, action, file_path, details=""):
        """G√©n√®re une explication avec Llama"""
        if not self.is_running:
            return f"ü§ñ {action} effectu√©e sur {file_path}. {details}"
        
        try:
            prompt = f"""Tu es un assistant de s√©curit√©. Explique simplement ce qui vient de se passer:

Action: {action}
Fichier: {file_path}
D√©tails: {details}

R√©ponds en fran√ßais, de mani√®re claire et rassurante, en 2-3 phrases maximum."""

            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return f"ü§ñ {result.get('response', 'Explication non disponible')}"
            else:
                return f"ü§ñ {action} effectu√©e sur {file_path}. {details}"
                
        except Exception as e:
            return f"ü§ñ {action} effectu√©e sur {file_path}. {details}"

# ================================
# GESTIONNAIRE DE VAULT
# ================================

class VaultManager:
    """Gestionnaire du vault de s√©curit√©"""
    
    def __init__(self):
        self.init_database()
        self.master_key = self.get_master_key()
    
    def init_database(self):
        """Initialise la base de donn√©es"""
        conn = sqlite3.connect(str(VAULT_DB))
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS vault_entries (
                uuid TEXT PRIMARY KEY,
                original_path TEXT NOT NULL,
                encrypted_path TEXT NOT NULL,
                filename TEXT NOT NULL,
                created_at TEXT NOT NULL,
                file_hash TEXT NOT NULL,
                file_size INTEGER NOT NULL
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def get_master_key(self):
        """G√©n√®re ou r√©cup√®re la cl√© ma√Ætre"""
        key_file = VAULT_DIR / "master.key"
        
        if key_file.exists():
            with open(key_file, 'r') as f:
                return f.read().strip()
        else:
            # G√©n√©rer une nouvelle cl√©
            key = secrets.token_urlsafe(32)
            with open(key_file, 'w') as f:
                f.write(key)
            return key
    
    def calculate_file_hash(self, file_path):
        """Calcule le hash d'un fichier"""
        hasher = hashlib.sha256()
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hasher.update(chunk)
        return hasher.hexdigest()
    
    def encrypt_file(self, file_path):
        """Chiffre un fichier"""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Fichier non trouv√©: {file_path}")
        
        # V√©rifier que pyAesCrypt est disponible
        try:
            import pyAesCrypt
        except ImportError:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyAesCrypt"])
            import pyAesCrypt
        
        # G√©n√©rer UUID et chemins
        file_uuid = str(uuid.uuid4())
        filename = os.path.basename(file_path)
        encrypted_path = ENCRYPTED_DIR / f"{file_uuid}.aes"
        
        # Chiffrer le fichier
        pyAesCrypt.encryptFile(file_path, str(encrypted_path), self.master_key)
        
        # Sauvegarder dans la base
        conn = sqlite3.connect(str(VAULT_DB))
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO vault_entries (uuid, original_path, encrypted_path, filename, created_at, file_hash, file_size)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            file_uuid,
            file_path,
            str(encrypted_path),
            filename,
            datetime.now().isoformat(),
            self.calculate_file_hash(file_path),
            os.path.getsize(file_path)
        ))
        
        conn.commit()
        conn.close()
        
        return {
            "uuid": file_uuid,
            "filename": filename,
            "encrypted_path": str(encrypted_path),
            "original_path": file_path
        }
    
    def decrypt_file(self, file_uuid, output_path=None):
        """D√©chiffre un fichier"""
        # V√©rifier que pyAesCrypt est disponible
        try:
            import pyAesCrypt
        except ImportError:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyAesCrypt"])
            import pyAesCrypt
            
        conn = sqlite3.connect(str(VAULT_DB))
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM vault_entries WHERE uuid = ?', (file_uuid,))
        row = cursor.fetchone()
        conn.close()
        
        if not row:
            raise ValueError(f"Fichier non trouv√© dans le vault: {file_uuid}")
        
        uuid, original_path, encrypted_path, filename, created_at, file_hash, file_size = row
        
        if not output_path:
            output_path = DECRYPTED_DIR / f"{filename}"
        
        # D√©chiffrer
        pyAesCrypt.decryptFile(encrypted_path, str(output_path), self.master_key)
        
        return {
            "uuid": uuid,
            "filename": filename,
            "decrypted_path": str(output_path),
            "original_path": original_path
        }
    
    def list_files(self):
        """Liste tous les fichiers dans le vault"""
        conn = sqlite3.connect(str(VAULT_DB))
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM vault_entries ORDER BY created_at DESC')
        rows = cursor.fetchall()
        conn.close()
        
        files = []
        for row in rows:
            files.append({
                "uuid": row[0],
                "filename": row[3],
                "original_path": row[1],
                "created_at": row[4],
                "file_size": row[6]
            })
        
        return files
    
    def get_stats(self):
        """Statistiques du vault"""
        conn = sqlite3.connect(str(VAULT_DB))
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*), SUM(file_size) FROM vault_entries')
        count, total_size = cursor.fetchone()
        
        conn.close()
        
        return {
            "total_files": count or 0,
            "total_size": total_size or 0
        }

# ================================
# AGENT PRINCIPAL
# ================================

class SecurityAgent:
    """Agent de s√©curit√© principal avec capacit√©s IA ReAct"""
    
    def __init__(self):
        self.vault_manager = VaultManager()
        self.ollama_manager = OllamaManager()
        self.secret_phrase = SECRET_PHRASE
        print("üîê Security Agent IA initialis√© (ReAct Mode)")
        
    def start_ollama(self):
        """D√©marre Ollama"""
        return self.ollama_manager.start_ollama()
    
    def analyze_file_with_ai(self, file_path: str, mode: str = "security") -> Dict[str, Any]:
        """
        Analyse un fichier avec l'IA (Mode ReAct)
        
        Args:
            file_path: Chemin du fichier √† analyser
            mode: Type d'analyse ("security", "content", "full")
            
        Returns:
            Dict avec l'analyse d√©taill√©e
        """
        try:
            # THOUGHT: Analyser le fichier pour d√©tecter des informations sensibles
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"Fichier non trouv√©: {file_path}")
            
            # ACTION: Lire le contenu du fichier
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            except UnicodeDecodeError:
                # Fichier binaire
                content = f"Fichier binaire ({os.path.getsize(file_path)} bytes)"
            
            # OBSERVATION: Analyser le contenu avec des patterns de s√©curit√©
            security_issues = []
            confidence_score = 0.0
            
            # D√©tection d'emails
            if "@" in content and "." in content:
                security_issues.append("email_addresses")
                confidence_score += 0.3
            
            # D√©tection de t√©l√©phones
            import re
            phone_patterns = [r'\+?\d{1,3}[-.\s]?\d{1,4}[-.\s]?\d{1,4}[-.\s]?\d{1,9}', r'\d{3}-\d{3}-\d{4}']
            for pattern in phone_patterns:
                if re.search(pattern, content):
                    security_issues.append("phone_numbers")
                    confidence_score += 0.25
                    break
            
            # D√©tection de mots de passe
            password_keywords = ["password", "mot de passe", "mdp", "pwd", "secret"]
            for keyword in password_keywords:
                if keyword.lower() in content.lower():
                    security_issues.append("credentials")
                    confidence_score += 0.4
                    break
            
            # D√©tection de num√©ros de carte
            card_pattern = r'\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}'
            if re.search(card_pattern, content):
                security_issues.append("payment_info")
                confidence_score += 0.5
            
            # THOUGHT: D√©terminer la recommandation de s√©curit√©
            if confidence_score >= 0.3:
                security_recommendation = "ENCRYPT_REQUIRED"
                risk_level = "HIGH" if confidence_score >= 0.5 else "MEDIUM"
            else:
                security_recommendation = "SAFE"
                risk_level = "LOW"
            
            # ACTION: G√©n√©rer une explication IA avec le mode ReAct
            ai_reasoning = self._generate_react_reasoning(file_path, content, security_issues, confidence_score, mode)
            
            return {
                "file_size": len(content) if isinstance(content, str) else os.path.getsize(file_path),
                "content_type": "text" if isinstance(content, str) else "binary",
                "security_issues": security_issues,
                "confidence_score": confidence_score,
                "risk_level": risk_level,
                "security_recommendation": security_recommendation,
                "ai_reasoning": ai_reasoning,
                "analysis_timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                "error": str(e),
                "security_recommendation": "ERROR",
                "ai_reasoning": f"Erreur lors de l'analyse: {str(e)}"
            }
    
    def _generate_react_reasoning(self, file_path: str, content: str, issues: list, confidence: float, mode: str) -> str:
        """G√©n√®re un raisonnement IA en mode ReAct"""
        
        if not self.ollama_manager.is_running:
            return f"ü§ñ Analyse basique: Fichier '{Path(file_path).name}' analys√©. Probl√®mes d√©tect√©s: {', '.join(issues) if issues else 'Aucun'}. Niveau de confiance: {confidence:.2f}"
        
        try:
            # Prompt ReAct pour l'IA
            react_prompt = f"""Tu es un agent de s√©curit√© IA expert. Utilise le raisonnement ReAct (Reasoning + Acting) pour analyser ce fichier.

FICHIER: {Path(file_path).name}
CONTENU (extrait): {content[:500]}...
PROBL√àMES D√âTECT√âS: {', '.join(issues) if issues else 'Aucun'}
NIVEAU DE CONFIANCE: {confidence:.2f}
MODE D'ANALYSE: {mode}

Utilise le format ReAct suivant:

THOUGHT: [Ton raisonnement sur la s√©curit√© du fichier]
ACTION: [Quelle action de s√©curit√© recommandes-tu]
OBSERVATION: [Ce que tu observes dans le fichier]
THOUGHT: [Conclusion sur le niveau de risque]
ACTION: [Recommandation finale]

R√©ponds en fran√ßais, sois pr√©cis et professionnel."""

            response = requests.post(
                f"{self.ollama_manager.ollama_url}/api/generate",
                json={
                    "model": self.ollama_manager.model_name,
                    "prompt": react_prompt,
                    "stream": False
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return f"ü§ñ IA ReAct: {result.get('response', 'Analyse non disponible')}"
            else:
                return f"ü§ñ Analyse locale: Fichier analys√© avec {len(issues)} probl√®mes de s√©curit√© d√©tect√©s."
                
        except Exception as e:
            return f"ü§ñ Analyse locale: Fichier analys√©. Probl√®mes: {', '.join(issues) if issues else 'Aucun'}."
    
    def encrypt_file(self, file_path: str, user_id: str = "default_user") -> Dict[str, Any]:
        """Chiffre un fichier avec analyse IA pr√©alable"""
        try:
            # THOUGHT: Analyser d'abord le fichier avant chiffrement
            analysis = self.analyze_file_with_ai(file_path, "security")
            
            # ACTION: Chiffrer le fichier
            result = self.vault_manager.encrypt_file(file_path)
            
            # OBSERVATION: G√©n√©rer une explication avec l'IA
            explanation = self.ollama_manager.generate_explanation(
                "Chiffrement",
                file_path,
                f"Fichier analys√© et chiffr√©. Probl√®mes de s√©curit√© d√©tect√©s: {', '.join(analysis.get('security_issues', []))}. UUID: {result['uuid']}"
            )
            
            result.update({
                "success": True,
                "analysis": analysis,
                "explanation": explanation,
                "user_id": user_id
            })
            
            print(f"‚úÖ Fichier chiffr√© avec analyse IA: {result['filename']} (UUID: {result['uuid']})")
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur chiffrement: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": f"Erreur lors du chiffrement: {str(e)}"
            }
    
    def decrypt_file(self, file_uuid: str, user_id: str = "default_user") -> Dict[str, Any]:
        """D√©chiffre un fichier avec explication IA"""
        try:
            result = self.vault_manager.decrypt_file(file_uuid)
            
            # G√©n√©rer une explication IA
            explanation = self.ollama_manager.generate_explanation(
                "D√©chiffrement",
                result['filename'],
                f"Fichier '{result['filename']}' d√©chiffr√© avec succ√®s et disponible temporairement dans le dossier 'decrypted'"
            )
            
            result.update({
                "success": True,
                "explanation": explanation,
                "user_id": user_id
            })
            
            print(f"‚úÖ Fichier d√©chiffr√© avec IA: {result['filename']}")
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur d√©chiffrement: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": f"Erreur lors du d√©chiffrement: {str(e)}"
            }
    
    def authenticate(self, secret_input):
        """V√©rifie l'authentification"""
        return secret_input == self.secret_phrase
    
    def list_files(self):
        """Liste les fichiers dans le vault"""
        return self.vault_manager.list_files()
    
    def get_stats(self):
        """Statistiques du vault"""
        return self.vault_manager.get_stats()
    
    def test(self):
        """Test de l'agent"""
        print("üß™ Mode test de l'agent...")
        
        # Afficher les stats
        stats = self.get_stats()
        print(f"üìä Vault: {stats['total_files']} fichiers, {stats['total_size']} bytes")
        
        # Cr√©er un fichier de test
        test_file = BASE_DIR / "test_demo.txt"
        with open(test_file, 'w') as f:
            f.write("Ceci est un fichier de test pour le chiffrement.\nEmail: test@example.com\nT√©l√©phone: 123-456-789")
        
        print(f"üìÑ Fichier de test cr√©√©: {test_file}")
        
        # Tester le chiffrement
        result = self.encrypt_file(str(test_file))
        print(f"üîê Chiffrement r√©ussi")
        
        # Tester le d√©chiffrement
        decrypted = self.decrypt_file(result['uuid'])
        print(f"üîì D√©chiffrement r√©ussi")
        
        # Nettoyer
        os.remove(test_file)
        print("üßπ Nettoyage termin√©")
        print("‚úÖ Test complet r√©ussi!")

# ================================
# SERVEUR API FASTAPI
# ================================

# Instance globale de l'agent
security_agent = None

def get_agent():
    """R√©cup√®re l'instance de l'agent de s√©curit√©"""
    global security_agent
    if security_agent is None:
        security_agent = SecurityAgent()
        security_agent.start_ollama()
    return security_agent

# Application FastAPI
app = FastAPI(
    title="üîê Security Agent API",
    description="Agent de s√©curit√© IA avec chiffrement et analyse ReAct",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

@app.get("/")
async def root():
    """Point d'entr√©e principal de l'API"""
    return {
        "message": "üîê Security Agent API",
        "version": "1.0.0",
        "features": ["encryption", "decryption", "ai_analysis", "react_reasoning"],
        "docs": "/docs",
        "endpoints": {
            "analyze": "/analyze - Analyse IA d'un fichier",
            "encrypt": "/encrypt - Chiffrement s√©curis√©",
            "decrypt": "/decrypt - D√©chiffrement avec auth",
            "vault": "/vault/stats - Statistiques du vault"
        }
    }

@app.post("/analyze", response_model=AnalyzeResponse)
async def analyze_file(request: AnalyzeRequest, agent: SecurityAgent = Depends(get_agent)):
    """
    Analyse un fichier avec l'IA en mode ReAct
    """
    try:
        analysis = agent.analyze_file_with_ai(request.file_path, request.mode)
        
        if "error" in analysis:
            raise HTTPException(status_code=400, detail=analysis["error"])
        
        return AnalyzeResponse(
            success=True,
            file_path=request.file_path,
            analysis=analysis,
            ai_reasoning=analysis.get("ai_reasoning", "Analyse termin√©e"),
            security_recommendation=analysis.get("security_recommendation", "UNKNOWN"),
            message=f"Analyse termin√©e. Niveau de risque: {analysis.get('risk_level', 'UNKNOWN')}"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de l'analyse: {str(e)}")

@app.post("/encrypt", response_model=EncryptResponse)
async def encrypt_file(request: EncryptRequest, agent: SecurityAgent = Depends(get_agent)):
    """
    Chiffre un fichier apr√®s analyse IA
    """
    try:
        result = agent.encrypt_file(request.file_path, request.user_id)
        
        if not result.get("success", False):
            raise HTTPException(status_code=400, detail=result.get("message", "Erreur de chiffrement"))
        
        return EncryptResponse(
            success=True,
            uuid=result.get("uuid"),
            filename=result.get("filename"),
            encrypted_path=result.get("encrypted_path"),
            ai_analysis=result.get("explanation"),
            message=f"Fichier '{result.get('filename')}' chiffr√© avec succ√®s"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors du chiffrement: {str(e)}")

@app.post("/decrypt", response_model=DecryptResponse)
async def decrypt_file(request: DecryptRequest, agent: SecurityAgent = Depends(get_agent)):
    """
    D√©chiffre un fichier avec authentification
    """
    try:
        # V√©rification de l'authentification
        if not agent.authenticate(request.secret_phrase):
            raise HTTPException(status_code=401, detail="Phrase secr√®te incorrecte")
        
        result = agent.decrypt_file(request.vault_uuid, request.user_id)
        
        if not result.get("success", False):
            raise HTTPException(status_code=400, detail=result.get("message", "Erreur de d√©chiffrement"))
        
        return DecryptResponse(
            success=True,
            filename=result.get("filename"),
            decrypted_path=result.get("decrypted_path"),
            ai_explanation=result.get("explanation"),
            message=f"Fichier '{result.get('filename')}' d√©chiffr√© avec succ√®s"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors du d√©chiffrement: {str(e)}")

@app.get("/vault/stats", response_model=VaultStats)
async def get_vault_stats(agent: SecurityAgent = Depends(get_agent)):
    """
    R√©cup√®re les statistiques du vault
    """
    try:
        stats = agent.get_stats()
        files = agent.list_files()
        
        return VaultStats(
            total_files=stats["total_files"],
            total_size=stats["total_size"],
            files=files
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration des stats: {str(e)}")

@app.get("/health")
async def health_check(agent: SecurityAgent = Depends(get_agent)):
    """
    V√©rification de l'√©tat de sant√© de l'agent
    """
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "ollama_running": agent.ollama_manager.is_running,
        "vault_accessible": True,
        "version": "1.0.0"
    }

# ================================
# SERVEUR SECURITY AGENT
# ================================

class SecurityAPIServer:
    """Serveur API pour l'agent de s√©curit√©"""
    
    def __init__(self, port=8080, host="0.0.0.0"):
        self.port = port
        self.host = host
        
    def start(self):
        """D√©marre le serveur API"""
        print("üîê Security Agent API Server")
        print("=" * 60)
        print(f"üöÄ D√©marrage du serveur API sur {self.host}:{self.port}")
        print(f"üì° URL API: http://{self.host}:{self.port}")
        print(f"üìö Documentation: http://{self.host}:{self.port}/docs")
        print(f"üîç ReDoc: http://{self.host}:{self.port}/redoc")
        print("=" * 60)
        print("ü§ñ Fonctionnalit√©s IA ReAct activ√©es")
        print("üîê Endpoints disponibles:")
        print("   ‚Ä¢ POST /analyze   - Analyse IA d'un fichier")
        print("   ‚Ä¢ POST /encrypt   - Chiffrement s√©curis√©")
        print("   ‚Ä¢ POST /decrypt   - D√©chiffrement avec auth")
        print("   ‚Ä¢ GET  /vault/stats - Statistiques du vault")
        print("   ‚Ä¢ GET  /health    - √âtat de sant√©")
        print("=" * 60)
        
        try:
            uvicorn.run(
                app, 
                host=self.host, 
                port=self.port,
                log_level="info",
                access_log=True
            )
        except KeyboardInterrupt:
            print("\nüëã Arr√™t du serveur API")
        except Exception as e:
            print(f"\n‚ùå Erreur serveur: {e}")

class SecurityServer:
    """Serveur HTTP pour l'agent de s√©curit√©"""
    
    def __init__(self, port=8080):
        self.port = port
        self.agent = SecurityAgent()
        
    def start(self):
        """D√©marre le serveur de l'agent de s√©curit√©"""
        print("üîê Security Agent - Mode Serveur")
        print("=" * 50)
        print(f"üöÄ D√©marrage du serveur sur le port {self.port}")
        print(f"üì° URL: http://localhost:{self.port}")
        print("=" * 50)
        
        # Initialisation de l'agent
        print("ü§ñ Initialisation de l'agent de s√©curit√©...")
        self.agent.start_ollama()
        
        # Affichage des statistiques
        stats = self.agent.get_stats()
        print(f"üìä Vault: {stats['total_files']} fichiers, {stats['total_size']} bytes")
        
        print("‚úÖ Agent de s√©curit√© pr√™t!")
        print("üîó Utilisez l'interface Streamlit pour interagir avec l'agent")
        print("üí° Commande: streamlit run security_interface.py")
        print("")
        print("üîß Commandes disponibles:")
        print("   - test    : Lance les tests")
        print("   - stats   : Affiche les statistiques")
        print("   - help    : Affiche l'aide")
        print("   - Ctrl+C  : Arr√™ter le serveur")
        
        try:
            # Boucle principale du serveur
            while True:
                command = input("\nüîê Security Agent > ").strip().lower()
                
                if command == "test":
                    print("üß™ Lancement des tests...")
                    self.agent.test()
                
                elif command == "stats":
                    stats = self.agent.get_stats()
                    print(f"ÔøΩ Statistiques du vault:")
                    print(f"   ‚Ä¢ Fichiers: {stats['total_files']}")
                    print(f"   ‚Ä¢ Taille: {stats['total_size']} bytes")
                    files = self.agent.list_files()
                    if files:
                        print("üìÅ Fichiers dans le vault:")
                        for file in files[:5]:  # Afficher max 5 fichiers
                            print(f"   ‚Ä¢ {file['filename']} ({file['uuid'][:8]}...)")
                
                elif command == "help":
                    print("üîê Security Agent - Aide")
                    print("Commandes disponibles:")
                    print("   test    - Lance les tests de l'agent")
                    print("   stats   - Affiche les statistiques du vault")
                    print("   help    - Affiche cette aide")
                    print("   exit    - Arr√™te le serveur")
                    print("")
                    print("Utilisation comme module:")
                    print("   from security_agent_core import SecurityAgent")
                
                elif command in ["exit", "quit", "q"]:
                    print("üëã Arr√™t du serveur...")
                    break
                
                elif command == "":
                    continue
                
                else:
                    print(f"‚ùå Commande inconnue: '{command}'")
                    print("üí° Tapez 'help' pour voir les commandes disponibles")
        
        except KeyboardInterrupt:
            print("\n\nüëã Arr√™t du serveur par l'utilisateur")
        except Exception as e:
            print(f"\n‚ùå Erreur serveur: {e}")
        finally:
            print("üîê Security Agent arr√™t√©")

# ================================
# D√âMARRAGE DIRECT
# ================================

def main():
    """Fonction principale"""
    if len(sys.argv) > 1:
        if sys.argv[1] == "test":
            agent = SecurityAgent()
            agent.start_ollama()
            agent.test()
        elif sys.argv[1] == "api":
            port = int(sys.argv[2]) if len(sys.argv) > 2 else 8080
            host = sys.argv[3] if len(sys.argv) > 3 else "0.0.0.0"
            api_server = SecurityAPIServer(port, host)
            api_server.start()
        elif sys.argv[1] == "server":
            port = int(sys.argv[2]) if len(sys.argv) > 2 else 8080
            server = SecurityServer(port)
            server.start()
        elif sys.argv[1] == "help":
            print("üîê Security Agent Core")
            print("")
            print("Usage:")
            print("  python security_agent_core.py              # Lance en mode API REST")
            print("  python security_agent_core.py api          # Lance en mode API REST")
            print("  python security_agent_core.py api 8090     # Lance l'API sur le port 8090")
            print("  python security_agent_core.py server       # Lance en mode serveur CLI")
            print("  python security_agent_core.py test         # Teste l'agent")
            print("  python security_agent_core.py help         # Affiche cette aide")
            print("")
            print("API REST Endpoints:")
            print("  POST /analyze   - Analyse IA d'un fichier")
            print("  POST /encrypt   - Chiffrement s√©curis√©")
            print("  POST /decrypt   - D√©chiffrement avec authentification")
            print("  GET  /vault/stats - Statistiques du vault")
            print("  GET  /health    - √âtat de sant√© de l'agent")
            print("  GET  /docs      - Documentation interactive")
            print("")
            print("Ou utilisez comme module:")
            print("  from security_agent_core import SecurityAgent")
        else:
            print("‚ùå Commande inconnue. Utilisez 'api', 'server', 'test' ou 'help'")
    else:
        # Mode API REST par d√©faut
        api_server = SecurityAPIServer()
        api_server.start()

if __name__ == "__main__":
    main()