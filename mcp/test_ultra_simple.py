#!/usr/bin/env python3
"""
TEST ULTRA-SIMPLE - Syst√®me Multi-Agent Complet
Tests de bout en bout : MCP ‚Üí Interface ‚Üí Backend ‚Üí Agents
"""
import os
import sys
import time
import threading
from pathlib import Path

def test_mcp_system():
    """Test du syst√®me MCP de base"""
    print("üß™ TEST 1: Syst√®me MCP de base")
    print("-" * 50)
    
    try:
        from simple_mcp_system import MCPSystem
        
        # Configuration
        config = {
            "vault_password": "test123",
            "encryption_key": "test_key_123"
        }
        
        # D√©marrer le syst√®me
        system = MCPSystem(config)
        system.start()
        
        print("‚úÖ Syst√®me MCP d√©marr√©")
        
        # Test analyse de r√©pertoire
        result = system.call_tool("Orchestrator", "process_directory", {"directory": "test_files"})
        if result.get("success"):
            print(f"‚úÖ Analyse r√©pertoire: {result.get('files_processed', 0)} fichiers")
        else:
            print("‚ùå Erreur analyse r√©pertoire")
            return False
        
        # Test recherche
        result = system.call_tool("Orchestrator", "smart_search", {"query": "cours histoire"})
        if result.get("success"):
            print(f"‚úÖ Recherche: {len(result.get('results', []))} r√©sultats")
        else:
            print("‚ùå Erreur recherche")
            return False
        
        # Arr√™ter
        system.stop()
        print("‚úÖ Syst√®me MCP arr√™t√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur MCP: {e}")
        return False

def test_interface_simple():
    """Test de l'interface desktop simple"""
    print("\nüñ•Ô∏è TEST 2: Interface Desktop")
    print("-" * 50)
    
    try:
        # Juste v√©rifier que l'interface peut √™tre import√©e
        import tkinter as tk
        print("‚úÖ tkinter disponible")
        
        # Test cr√©ation interface basique
        root = tk.Tk()
        root.title("Test Interface")
        root.geometry("300x200")
        
        # Cr√©er quelques widgets de test
        label = tk.Label(root, text="Interface de test")
        label.pack(pady=20)
        
        button = tk.Button(root, text="Test OK", command=root.quit)
        button.pack(pady=10)
        
        # Fermer automatiquement apr√®s 2 secondes
        root.after(2000, root.quit)
        
        print("‚úÖ Interface cr√©√©e (fermeture automatique)")
        root.mainloop()
        
        return True
        
    except ImportError:
        print("‚ùå tkinter non disponible")
        return False
    except Exception as e:
        print(f"‚ùå Erreur interface: {e}")
        return False

def test_api_backend():
    """Test du backend API"""
    print("\nüåê TEST 3: Backend API")
    print("-" * 50)
    
    try:
        import fastapi
        import uvicorn
        print("‚úÖ FastAPI disponible")
        
        # Test cr√©ation API basique
        app = fastapi.FastAPI(title="Test API")
        
        @app.get("/health")
        def health_check():
            return {"status": "ok", "test": True}
        
        @app.post("/test-analyze")
        def test_analyze(data: dict):
            return {"success": True, "files_processed": 5}
        
        print("‚úÖ API cr√©√©e avec succ√®s")
        
        # Test de d√©marrage rapide (sans serveur r√©el)
        print("‚úÖ Endpoints configur√©s")
        
        return True
        
    except ImportError:
        print("‚ùå FastAPI non disponible")
        return False
    except Exception as e:
        print(f"‚ùå Erreur API: {e}")
        return False

def test_complete_workflow():
    """Test du workflow complet"""
    print("\nüîÑ TEST 4: Workflow Complet")
    print("-" * 50)
    
    try:
        # Simuler le workflow complet
        print("üìÅ 1. S√©lection du dossier test_files")
        
        # V√©rifier que les fichiers existent
        test_dir = Path("test_files")
        if not test_dir.exists():
            print("‚ùå Dossier test_files non trouv√©")
            return False
        
        files = list(test_dir.glob("*.txt")) + list(test_dir.glob("*.json"))
        print(f"üìÑ 2. {len(files)} fichiers trouv√©s")
        
        # Simuler l'analyse
        print("üîç 3. Analyse des fichiers...")
        sensitive_files = []
        public_files = []
        
        for file_path in files:
            content = file_path.read_text(encoding='utf-8')
            # D√©tection PII simple
            if any(keyword in content.lower() for keyword in ["s√©curit√© sociale", "carte", "email", "t√©l√©phone"]):
                sensitive_files.append(file_path.name)
            else:
                public_files.append(file_path.name)
        
        print(f"üîí 4. Fichiers sensibles: {len(sensitive_files)}")
        print(f"üìÑ 5. Fichiers publics: {len(public_files)}")
        
        # Simuler la recherche
        print("üîç 6. Test de recherche...")
        
        search_queries = [
            "cours histoire",
            "document sensible",
            "ordonnance m√©dicale"
        ]
        
        for query in search_queries:
            # Recherche simple par nom de fichier
            matches = [f for f in files if any(word in f.name.lower() for word in query.split())]
            print(f"   '{query}': {len(matches)} r√©sultat(s)")
        
        # Simuler l'authentification
        print("üîê 7. Test d'authentification...")
        test_password = "test123"
        print(f"   Mot de passe test: {'‚úÖ' if test_password == 'test123' else '‚ùå'}")
        
        print("‚úÖ Workflow complet test√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur workflow: {e}")
        return False

def test_integration_llama():
    """Test d'int√©gration avec Llama3 (simul√©)"""
    print("\nü§ñ TEST 5: Int√©gration IA (Llama3 simul√©)")
    print("-" * 50)
    
    try:
        # Simuler l'int√©gration Llama3
        def simulate_llama_response(prompt):
            """Simuler une r√©ponse Llama3"""
            prompt_lower = prompt.lower()
            
            if "carte vitale" in prompt_lower:
                return {
                    "intent": "search_sensitive_document",
                    "document_type": "carte_vitale",
                    "requires_auth": True,
                    "confidence": 0.95
                }
            elif "cours" in prompt_lower and "histoire" in prompt_lower:
                return {
                    "intent": "search_document",
                    "document_type": "cours",
                    "subject": "histoire",
                    "requires_auth": False,
                    "confidence": 0.90
                }
            elif "facture" in prompt_lower or "factures" in prompt_lower:
                return {
                    "intent": "search_documents",
                    "document_type": "facture",
                    "requires_auth": False,
                    "confidence": 0.85
                }
            else:
                return {
                    "intent": "general_search",
                    "query": prompt,
                    "requires_auth": False,
                    "confidence": 0.70
                }
        
        # Test de plusieurs prompts
        test_prompts = [
            "trouve moi le scan de ma carte vitale",
            "donne moi le pdf de cours d'histoire",
            "o√π sont mes factures",
            "liste tous les documents"
        ]
        
        for prompt in test_prompts:
            response = simulate_llama_response(prompt)
            print(f"   Prompt: '{prompt}'")
            print(f"   R√©ponse: {response['intent']} (confiance: {response['confidence']})")
            print()
        
        print("‚úÖ Int√©gration IA simul√©e avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur int√©gration IA: {e}")
        return False

def main():
    """Test complet du syst√®me"""
    print("=" * 60)
    print("üß™ TESTS ULTRA-SIMPLES - SYST√àME MULTI-AGENT")
    print("=" * 60)
    
    tests = [
        ("MCP System", test_mcp_system),
        ("Interface Desktop", test_interface_simple),
        ("Backend API", test_api_backend),
        ("Workflow Complet", test_complete_workflow),
        ("Int√©gration IA", test_integration_llama)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå Erreur critique dans {test_name}: {e}")
            results[test_name] = False
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = sum(1 for success in results.values() if success)
    total = len(results)
    
    for test_name, success in results.items():
        status = "‚úÖ R√âUSSI" if success else "‚ùå √âCHOU√â"
        print(f"{test_name:<20} : {status}")
    
    print(f"\nR√©sultats: {passed}/{total} tests r√©ussis ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ TOUS LES TESTS R√âUSSIS - SYST√àME PR√äT POUR LA D√âMO!")
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è SYST√àME PARTIELLEMENT FONCTIONNEL - QUELQUES CORRECTIONS N√âCESSAIRES")
    else:
        print("‚ùå SYST√àME NON FONCTIONNEL - CORRECTIONS IMPORTANTES N√âCESSAIRES")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
