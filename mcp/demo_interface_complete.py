#!/usr/bin/env python3
"""
D√âMONSTRATION COMPL√àTE - Interface Desktop avec Backend MCP
Test de bout en bout avec interface utilisateur r√©elle
"""
import os
import sys
import time
import threading
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext, simpledialog
from pathlib import Path
import json

class DemoCompleteInterface:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ü§ñ D√âMO COMPL√àTE - Syst√®me Multi-Agent KACM")
        self.root.geometry("1400x900")
        self.root.configure(bg='#1e1e1e')
        
        # Configuration du style
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.setup_styles()
        
        # Variables
        self.current_directory = tk.StringVar(value="test_files")
        self.search_query = tk.StringVar()
        self.mcp_system = None
        self.is_mcp_running = False
        
        # Donn√©es de d√©monstration
        self.demo_data = {
            "files_analyzed": [],
            "search_results": [],
            "vault_password": "test123"
        }
        
        # Cr√©er l'interface
        self.create_interface()
        
        # Initialiser le syst√®me MCP
        self.init_mcp_system()
        
    def setup_styles(self):
        """Configurer les styles personnalis√©s"""
        self.style.configure('Title.TLabel', 
                           font=('Arial', 20, 'bold'), 
                           background='#1e1e1e', 
                           foreground='#ffffff')
        
        self.style.configure('Header.TLabel', 
                           font=('Arial', 14, 'bold'), 
                           background='#1e1e1e', 
                           foreground='#ffffff')
        
        self.style.configure('Custom.TFrame', 
                           background='#1e1e1e')
        
        self.style.configure('Success.TLabel', 
                           font=('Arial', 12, 'bold'), 
                           background='#1e1e1e', 
                           foreground='#00ff00')
        
        self.style.configure('Error.TLabel', 
                           font=('Arial', 12, 'bold'), 
                           background='#1e1e1e', 
                           foreground='#ff0000')
        
    def create_interface(self):
        """Cr√©er l'interface utilisateur compl√®te"""
        # Header
        header_frame = ttk.Frame(self.root, style='Custom.TFrame')
        header_frame.pack(fill='x', pady=10)
        
        title_label = ttk.Label(header_frame, 
                               text="ü§ñ D√âMONSTRATION COMPL√àTE - Syst√®me Multi-Agent KACM", 
                               style='Title.TLabel')
        title_label.pack()
        
        subtitle_label = ttk.Label(header_frame, 
                                 text="Interface Desktop + Backend MCP + Agents IA", 
                                 style='Header.TLabel')
        subtitle_label.pack(pady=5)
        
        # Main container
        main_container = ttk.Frame(self.root, style='Custom.TFrame')
        main_container.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Left panel - Controls
        left_panel = ttk.LabelFrame(main_container, text="üéÆ CONTR√îLES", style='Custom.TFrame')
        left_panel.pack(side='left', fill='y', padx=10, pady=10)
        
        self.create_controls_panel(left_panel)
        
        # Right panel - Results
        right_panel = ttk.LabelFrame(main_container, text="üìä R√âSULTATS", style='Custom.TFrame')
        right_panel.pack(side='right', fill='both', expand=True, padx=10, pady=10)
        
        self.create_results_panel(right_panel)
        
        # Bottom panel - Status
        status_frame = ttk.Frame(self.root, style='Custom.TFrame')
        status_frame.pack(fill='x', padx=20, pady=10)
        
        self.status_label = ttk.Label(status_frame, text="üü° Initialisation...", style='Header.TLabel')
        self.status_label.pack(side='left')
        
        # Boutons d'aide
        help_frame = ttk.Frame(status_frame, style='Custom.TFrame')
        help_frame.pack(side='right')
        
        ttk.Button(help_frame, text="‚ùì Aide", command=self.show_help).pack(side='right', padx=5)
        ttk.Button(help_frame, text="üìã Logs", command=self.show_logs).pack(side='right', padx=5)
        
    def create_controls_panel(self, parent):
        """Cr√©er le panneau de contr√¥les"""
        # Section 1: Analyse de dossier
        folder_section = ttk.LabelFrame(parent, text="üìÅ ANALYSE DE DOSSIER")
        folder_section.pack(fill='x', pady=10, padx=10)
        
        ttk.Label(folder_section, text="Dossier:").pack(anchor='w', padx=5, pady=2)
        
        folder_frame = ttk.Frame(folder_section)
        folder_frame.pack(fill='x', padx=5, pady=5)
        
        self.folder_entry = ttk.Entry(folder_frame, textvariable=self.current_directory, width=30)
        self.folder_entry.pack(side='left', fill='x', expand=True)
        
        ttk.Button(folder_frame, text="üìÇ", command=self.browse_folder).pack(side='right', padx=2)
        
        ttk.Button(folder_section, text="üöÄ ANALYSER", command=self.analyze_folder).pack(pady=10)
        
        # Section 2: Recherche IA
        search_section = ttk.LabelFrame(parent, text="ü§ñ RECHERCHE IA")
        search_section.pack(fill='x', pady=10, padx=10)
        
        ttk.Label(search_section, text="Prompt (langage naturel):").pack(anchor='w', padx=5, pady=2)
        
        self.search_entry = ttk.Entry(search_section, textvariable=self.search_query, width=35)
        self.search_entry.pack(fill='x', padx=5, pady=5)
        
        # Exemples de prompts
        examples_frame = ttk.Frame(search_section)
        examples_frame.pack(fill='x', padx=5, pady=5)
        
        ttk.Label(examples_frame, text="Exemples:").pack(anchor='w')
        
        examples = [
            "trouve ma carte vitale",
            "cours d'histoire",
            "documents sensibles",
            "ordonnance m√©dicale"
        ]
        
        for example in examples:
            btn = ttk.Button(examples_frame, text=f"'{example}'", 
                           command=lambda e=example: self.search_query.set(e))
            btn.pack(fill='x', pady=1)
        
        ttk.Button(search_section, text="üîç RECHERCHER", command=self.smart_search).pack(pady=10)
        
        # Section 3: Contr√¥les syst√®me
        system_section = ttk.LabelFrame(parent, text="‚öôÔ∏è SYST√àME")
        system_section.pack(fill='x', pady=10, padx=10)
        
        ttk.Button(system_section, text="üîÑ Red√©marrer MCP", command=self.restart_mcp).pack(fill='x', pady=2)
        ttk.Button(system_section, text="üß™ Test Complet", command=self.run_full_test).pack(fill='x', pady=2)
        ttk.Button(system_section, text="üîë Changer Mot de Passe", command=self.change_password).pack(fill='x', pady=2)
        
    def create_results_panel(self, parent):
        """Cr√©er le panneau de r√©sultats"""
        # Notebook pour les onglets
        self.notebook = ttk.Notebook(parent)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Onglet 1: Fichiers analys√©s
        analysis_frame = ttk.Frame(self.notebook)
        self.notebook.add(analysis_frame, text="üìÑ Fichiers Analys√©s")
        
        self.analysis_text = scrolledtext.ScrolledText(analysis_frame, wrap=tk.WORD, 
                                                      bg='#2d2d2d', fg='white', 
                                                      font=('Consolas', 10))
        self.analysis_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Onglet 2: R√©sultats de recherche
        search_frame = ttk.Frame(self.notebook)
        self.notebook.add(search_frame, text="üîç R√©sultats de Recherche")
        
        self.search_text = scrolledtext.ScrolledText(search_frame, wrap=tk.WORD, 
                                                    bg='#2d2d2d', fg='white', 
                                                    font=('Consolas', 10))
        self.search_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Onglet 3: Logs syst√®me
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="üìã Logs Syst√®me")
        
        self.logs_text = scrolledtext.ScrolledText(logs_frame, wrap=tk.WORD, 
                                                  bg='#2d2d2d', fg='white', 
                                                  font=('Consolas', 10))
        self.logs_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Message de bienvenue
        welcome_msg = """üéâ BIENVENUE DANS LA D√âMONSTRATION COMPL√àTE!

üöÄ √âTAPES POUR TESTER:

1. üìÅ ANALYSE DE DOSSIER
   - Le dossier 'test_files' est pr√©-s√©lectionn√©
   - Cliquez sur 'ANALYSER' pour d√©marrer l'analyse
   - Observez les r√©sultats dans l'onglet 'Fichiers Analys√©s'

2. ü§ñ RECHERCHE IA
   - Utilisez les exemples de prompts ou tapez votre propre requ√™te
   - Cliquez sur 'RECHERCHER' pour lancer la recherche intelligente
   - Les fichiers sensibles n√©cessiteront une authentification

3. üîê AUTHENTIFICATION
   - Mot de passe du vault: test123
   - N√©cessaire pour acc√©der aux fichiers sensibles

üéØ FONCTIONNALIT√âS D√âMONTR√âES:
‚úÖ Analyse multi-format (texte, JSON, etc.)
‚úÖ D√©tection automatique de PII
‚úÖ Chiffrement des fichiers sensibles
‚úÖ Recherche intelligente en langage naturel
‚úÖ Authentification s√©curis√©e
‚úÖ Interface desktop moderne
‚úÖ Int√©gration backend MCP

üîß ARCHITECTURE:
- Interface Desktop (tkinter)
- Backend MCP (Multi-Agent System)
- Agents sp√©cialis√©s (NLP, Vision, Audio, Security)
- Int√©gration IA (Llama3 simul√©)

Pr√™t pour la d√©monstration! üé™
"""
        self.logs_text.insert('1.0', welcome_msg)
        
    def init_mcp_system(self):
        """Initialiser le syst√®me MCP"""
        def init_thread():
            try:
                self.log_message("üöÄ Initialisation du syst√®me MCP...")
                
                # V√©rifier si le syst√®me MCP est disponible
                try:
                    from simple_mcp_system import MCPSystem
                    
                    config = {
                        "vault_password": self.demo_data["vault_password"],
                        "encryption_key": "demo_key_2024"
                    }
                    
                    self.mcp_system = MCPSystem(config)
                    self.mcp_system.start()
                    
                    self.is_mcp_running = True
                    self.log_message("‚úÖ Syst√®me MCP initialis√© avec succ√®s")
                    self.update_status("üü¢ Syst√®me MCP pr√™t")
                    
                except ImportError:
                    self.log_message("‚ö†Ô∏è Syst√®me MCP non disponible - Mode simulation activ√©")
                    self.update_status("üü° Mode simulation (MCP non disponible)")
                    
            except Exception as e:
                self.log_message(f"‚ùå Erreur lors de l'initialisation MCP: {e}")
                self.update_status("üî¥ Erreur MCP")
                
        threading.Thread(target=init_thread, daemon=True).start()
        
    def browse_folder(self):
        """S√©lectionner un dossier"""
        folder = filedialog.askdirectory(title="S√©lectionner le dossier √† analyser")
        if folder:
            self.current_directory.set(folder)
            self.log_message(f"üìÅ Dossier s√©lectionn√©: {folder}")
            
    def analyze_folder(self):
        """Analyser le dossier s√©lectionn√©"""
        directory = self.current_directory.get()
        if not directory or not os.path.exists(directory):
            messagebox.showerror("Erreur", "Veuillez s√©lectionner un dossier valide")
            return
        
        self.update_status("‚è≥ Analyse en cours...")
        self.analysis_text.delete('1.0', tk.END)
        self.notebook.select(0)  # Passer √† l'onglet analyse
        
        def analyze_thread():
            try:
                self.analysis_text.insert(tk.END, f"üîç ANALYSE DU DOSSIER: {directory}\n")
                self.analysis_text.insert(tk.END, "=" * 60 + "\n\n")
                
                # Analyser les fichiers
                files = list(Path(directory).glob("*"))
                text_files = [f for f in files if f.suffix in ['.txt', '.json', '.md']]
                
                if not text_files:
                    self.analysis_text.insert(tk.END, "‚ùå Aucun fichier texte trouv√©\n")
                    self.update_status("‚ùå Aucun fichier √† analyser")
                    return
                
                self.analysis_text.insert(tk.END, f"üìÑ {len(text_files)} fichiers trouv√©s\n\n")
                
                sensitive_files = []
                public_files = []
                
                for file_path in text_files:
                    try:
                        content = file_path.read_text(encoding='utf-8')
                        
                        # D√©tection PII simple
                        pii_keywords = [
                            "s√©curit√© sociale", "carte bancaire", "visa", "mastercard",
                            "email", "t√©l√©phone", "adresse", "ordonnance", "m√©dical",
                            "confidentiel", "sensible", "cvv", "expiration"
                        ]
                        
                        is_sensitive = any(keyword in content.lower() for keyword in pii_keywords)
                        
                        self.analysis_text.insert(tk.END, f"üìÅ {file_path.name}\n")
                        self.analysis_text.insert(tk.END, f"   Taille: {len(content)} caract√®res\n")
                        
                        if is_sensitive:
                            sensitive_files.append(file_path.name)
                            self.analysis_text.insert(tk.END, "   üîí SENSIBLE - Sera chiffr√©\n")
                            
                            # D√©tailler les PII trouv√©s
                            found_pii = [kw for kw in pii_keywords if kw in content.lower()]
                            self.analysis_text.insert(tk.END, f"   üìã PII d√©tect√©s: {', '.join(found_pii[:3])}\n")
                            
                        else:
                            public_files.append(file_path.name)
                            self.analysis_text.insert(tk.END, "   üìÑ PUBLIC - Acc√®s libre\n")
                        
                        self.analysis_text.insert(tk.END, "\n")
                        
                    except Exception as e:
                        self.analysis_text.insert(tk.END, f"   ‚ùå Erreur lecture: {e}\n\n")
                
                # R√©sum√©
                self.analysis_text.insert(tk.END, "üìä R√âSUM√â DE L'ANALYSE\n")
                self.analysis_text.insert(tk.END, "=" * 60 + "\n")
                self.analysis_text.insert(tk.END, f"‚úÖ Fichiers trait√©s: {len(text_files)}\n")
                self.analysis_text.insert(tk.END, f"üîí Fichiers sensibles: {len(sensitive_files)}\n")
                self.analysis_text.insert(tk.END, f"üìÑ Fichiers publics: {len(public_files)}\n\n")
                
                if sensitive_files:
                    self.analysis_text.insert(tk.END, "üîê FICHIERS SENSIBLES (chiffr√©s):\n")
                    for filename in sensitive_files:
                        self.analysis_text.insert(tk.END, f"   ‚Ä¢ {filename}\n")
                    self.analysis_text.insert(tk.END, "\n")
                
                if public_files:
                    self.analysis_text.insert(tk.END, "üìÇ FICHIERS PUBLICS (acc√®s libre):\n")
                    for filename in public_files:
                        self.analysis_text.insert(tk.END, f"   ‚Ä¢ {filename}\n")
                    self.analysis_text.insert(tk.END, "\n")
                
                self.analysis_text.insert(tk.END, "üéØ Analyse termin√©e avec succ√®s!\n")
                self.analysis_text.insert(tk.END, "Utilisez la recherche IA pour trouver des fichiers sp√©cifiques.\n")
                
                # Sauvegarder les r√©sultats
                self.demo_data["files_analyzed"] = {
                    "total": len(text_files),
                    "sensitive": sensitive_files,
                    "public": public_files
                }
                
                self.log_message(f"‚úÖ Analyse termin√©e: {len(text_files)} fichiers, {len(sensitive_files)} sensibles")
                self.update_status("‚úÖ Analyse termin√©e")
                
            except Exception as e:
                self.analysis_text.insert(tk.END, f"‚ùå Erreur lors de l'analyse: {e}\n")
                self.update_status("‚ùå Erreur analyse")
                self.log_message(f"‚ùå Erreur analyse: {e}")
                
        threading.Thread(target=analyze_thread, daemon=True).start()
        
    def smart_search(self):
        """Recherche intelligente"""
        query = self.search_query.get().strip()
        if not query:
            messagebox.showerror("Erreur", "Veuillez saisir une requ√™te")
            return
        
        self.update_status("üîç Recherche en cours...")
        self.search_text.delete('1.0', tk.END)
        self.notebook.select(1)  # Passer √† l'onglet recherche
        
        def search_thread():
            try:
                self.search_text.insert(tk.END, f"üîç RECHERCHE IA: {query}\n")
                self.search_text.insert(tk.END, "=" * 60 + "\n\n")
                
                # Simulation de l'analyse par IA (Llama3)
                self.search_text.insert(tk.END, "ü§ñ Analyse du prompt par IA...\n")
                
                # Analyse du prompt
                query_lower = query.lower()
                search_results = []
                
                # Mapping des fichiers de test
                file_mapping = {
                    "carte vitale": ("document_sensible.txt", True, "Contient des donn√©es de s√©curit√© sociale"),
                    "cours histoire": ("cours_histoire.txt", False, "Cours d'histoire moderne"),
                    "ordonnance": ("ordonnance_medicale.json", True, "Ordonnance m√©dicale personnelle"),
                    "bulletin": ("bulletin_paie.txt", True, "Bulletin de paie avec donn√©es personnelles"),
                    "recette": ("recette_cuisine.txt", False, "Recette de cuisine publique"),
                    "document sensible": ("document_sensible.txt", True, "Document contenant des PII"),
                    "sensible": ("document_sensible.txt", True, "Document contenant des PII"),
                    "confidentiel": ("document_sensible.txt", True, "Document confidentiel")
                }
                
                # Chercher les correspondances
                for keyword, (filename, is_sensitive, description) in file_mapping.items():
                    if keyword in query_lower:
                        search_results.append({
                            "filename": filename,
                            "sensitive": is_sensitive,
                            "description": description,
                            "confidence": 0.9 if keyword in query_lower else 0.7
                        })
                
                # Si aucune correspondance exacte, recherche g√©n√©rale
                if not search_results:
                    if "document" in query_lower:
                        search_results.append({
                            "filename": "document_sensible.txt",
                            "sensitive": True,
                            "description": "Document contenant des donn√©es sensibles",
                            "confidence": 0.6
                        })
                
                # Afficher les r√©sultats
                if search_results:
                    self.search_text.insert(tk.END, f"üéØ {len(search_results)} r√©sultat(s) trouv√©(s):\n\n")
                    
                    for i, result in enumerate(search_results, 1):
                        self.search_text.insert(tk.END, f"{i}. {result['filename']}\n")
                        self.search_text.insert(tk.END, f"   üìä Confiance: {result['confidence']*100:.1f}%\n")
                        self.search_text.insert(tk.END, f"   üìÑ Description: {result['description']}\n")
                        self.search_text.insert(tk.END, f"   üîí Statut: {'SENSIBLE (chiffr√©)' if result['sensitive'] else 'PUBLIC'}\n")
                        
                        if result['sensitive']:
                            self.search_text.insert(tk.END, f"   üîê Authentification requise\n")
                            
                            # Bouton pour d√©chiffrer
                            decrypt_btn = tk.Button(
                                self.search_text.master,
                                text=f"üîì Acc√©der √† {result['filename']}",
                                command=lambda f=result['filename']: self.decrypt_file(f),
                                bg='#4CAF50',
                                fg='white',
                                font=('Arial', 10, 'bold')
                            )
                            
                            self.search_text.insert(tk.END, "\n")
                            self.search_text.window_create(tk.END, window=decrypt_btn)
                            self.search_text.insert(tk.END, "\n")
                        else:
                            self.search_text.insert(tk.END, f"   ‚úÖ Acc√®s direct autoris√©\n")
                            
                            # Bouton pour ouvrir
                            open_btn = tk.Button(
                                self.search_text.master,
                                text=f"üìÇ Ouvrir {result['filename']}",
                                command=lambda f=result['filename']: self.open_file(f),
                                bg='#2196F3',
                                fg='white',
                                font=('Arial', 10, 'bold')
                            )
                            
                            self.search_text.insert(tk.END, "\n")
                            self.search_text.window_create(tk.END, window=open_btn)
                            self.search_text.insert(tk.END, "\n")
                        
                        self.search_text.insert(tk.END, "\n")
                    
                    self.log_message(f"‚úÖ Recherche termin√©e: {len(search_results)} r√©sultat(s)")
                    self.update_status("‚úÖ Recherche termin√©e")
                    
                else:
                    self.search_text.insert(tk.END, "‚ùå Aucun r√©sultat trouv√©\n")
                    self.search_text.insert(tk.END, "üí° Essayez des termes comme: carte vitale, cours histoire, ordonnance\n")
                    self.update_status("‚ùå Aucun r√©sultat")
                    
            except Exception as e:
                self.search_text.insert(tk.END, f"‚ùå Erreur lors de la recherche: {e}\n")
                self.update_status("‚ùå Erreur recherche")
                self.log_message(f"‚ùå Erreur recherche: {e}")
                
        threading.Thread(target=search_thread, daemon=True).start()
        
    def decrypt_file(self, filename):
        """D√©chiffrer un fichier sensible"""
        password = simpledialog.askstring(
            "Authentification",
            f"üîê Acc√®s au fichier: {filename}\n\nMot de passe requis:",
            show='*'
        )
        
        if not password:
            return
        
        if password == self.demo_data["vault_password"]:
            # Simuler le d√©chiffrement
            messagebox.showinfo(
                "Succ√®s",
                f"‚úÖ Authentification r√©ussie!\n\nFichier d√©chiffr√©: {filename}\n\nLe fichier est maintenant accessible dans le dossier 'temp_decrypted'."
            )
            self.log_message(f"‚úÖ Fichier d√©chiffr√© avec succ√®s: {filename}")
            
            # Simuler l'ouverture du fichier
            self.open_file(filename, decrypted=True)
            
        else:
            messagebox.showerror("Erreur", "‚ùå Mot de passe incorrect")
            self.log_message("‚ùå Tentative de d√©chiffrement √©chou√©e: mot de passe incorrect")
            
    def open_file(self, filename, decrypted=False):
        """Ouvrir un fichier"""
        try:
            if decrypted:
                file_path = Path("temp_decrypted") / filename
                # Simuler la cr√©ation du fichier d√©chiffr√©
                file_path.parent.mkdir(exist_ok=True)
                if not file_path.exists():
                    file_path.write_text(f"[FICHIER D√âCHIFFR√â]\nContenu de {filename}\n\nCeci est une simulation du fichier d√©chiffr√©.")
            else:
                file_path = Path("test_files") / filename
            
            if file_path.exists():
                # Ouvrir avec l'application par d√©faut
                os.startfile(str(file_path))
                self.log_message(f"üìÇ Fichier ouvert: {filename}")
            else:
                messagebox.showerror("Erreur", f"Fichier non trouv√©: {filename}")
                
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible d'ouvrir le fichier: {e}")
            self.log_message(f"‚ùå Erreur ouverture fichier: {e}")
            
    def restart_mcp(self):
        """Red√©marrer le syst√®me MCP"""
        self.update_status("üîÑ Red√©marrage MCP...")
        self.log_message("üîÑ Red√©marrage du syst√®me MCP...")
        
        def restart_thread():
            try:
                if self.mcp_system:
                    self.mcp_system.stop()
                
                time.sleep(2)
                self.init_mcp_system()
                
            except Exception as e:
                self.log_message(f"‚ùå Erreur red√©marrage: {e}")
                
        threading.Thread(target=restart_thread, daemon=True).start()
        
    def run_full_test(self):
        """Ex√©cuter un test complet"""
        self.update_status("üß™ Test complet en cours...")
        self.log_message("üß™ D√©marrage du test complet...")
        
        def test_thread():
            try:
                # Test 1: Analyse
                self.log_message("Test 1: Analyse de dossier...")
                self.analyze_folder()
                time.sleep(3)
                
                # Test 2: Recherche
                self.log_message("Test 2: Recherche intelligente...")
                self.search_query.set("document sensible")
                self.smart_search()
                time.sleep(3)
                
                # Test 3: Authentification
                self.log_message("Test 3: Test d'authentification...")
                # Simuler l'authentification
                
                self.log_message("‚úÖ Test complet termin√© avec succ√®s!")
                self.update_status("‚úÖ Test complet r√©ussi")
                
            except Exception as e:
                self.log_message(f"‚ùå Erreur test complet: {e}")
                self.update_status("‚ùå Erreur test")
                
        threading.Thread(target=test_thread, daemon=True).start()
        
    def change_password(self):
        """Changer le mot de passe du vault"""
        new_password = simpledialog.askstring(
            "Nouveau mot de passe",
            "Saisissez le nouveau mot de passe du vault:",
            show='*'
        )
        
        if new_password:
            self.demo_data["vault_password"] = new_password
            messagebox.showinfo("Succ√®s", "‚úÖ Mot de passe modifi√© avec succ√®s")
            self.log_message("‚úÖ Mot de passe du vault modifi√©")
            
    def show_help(self):
        """Afficher l'aide"""
        help_text = """üÜò AIDE - D√âMONSTRATION COMPL√àTE

üéØ OBJECTIF:
D√©montrer le syst√®me multi-agent avec interface desktop,
backend MCP, et int√©gration IA pour l'analyse et la s√©curisation
automatique de documents.

üéÆ UTILISATION:

1. üìÅ ANALYSE DE DOSSIER
   - S√©lectionnez un dossier (test_files par d√©faut)
   - Cliquez sur "ANALYSER" pour d√©marrer l'analyse
   - Observez la d√©tection automatique de PII

2. ü§ñ RECHERCHE IA
   - Tapez votre requ√™te en langage naturel
   - Utilisez les exemples fournis
   - Authentifiez-vous pour les fichiers sensibles

3. üîê AUTHENTIFICATION
   - Mot de passe par d√©faut: test123
   - Modifiable via "Changer Mot de Passe"

üîß FONCTIONNALIT√âS:
‚úÖ Analyse multi-format automatique
‚úÖ D√©tection PII intelligente
‚úÖ Chiffrement automatique
‚úÖ Recherche en langage naturel
‚úÖ Authentification s√©curis√©e
‚úÖ Interface desktop moderne

üé™ SC√âNARIOS DE D√âMO:
1. Analyse de s√©curit√©
2. Recherche de documents sensibles
3. Authentification et d√©chiffrement
4. Acc√®s aux documents publics

‚ùì SUPPORT:
- Consultez les logs pour le diagnostic
- Utilisez "Test Complet" pour valider le syst√®me
- Red√©marrez MCP en cas de probl√®me
"""
        
        help_window = tk.Toplevel(self.root)
        help_window.title("Aide")
        help_window.geometry("700x600")
        help_window.configure(bg='#1e1e1e')
        
        help_text_widget = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, 
                                                    bg='#2d2d2d', fg='white')
        help_text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        help_text_widget.insert('1.0', help_text)
        help_text_widget.config(state='disabled')
        
    def show_logs(self):
        """Afficher les logs dans une fen√™tre s√©par√©e"""
        logs_window = tk.Toplevel(self.root)
        logs_window.title("Logs Syst√®me")
        logs_window.geometry("800x600")
        logs_window.configure(bg='#1e1e1e')
        
        logs_text_widget = scrolledtext.ScrolledText(logs_window, wrap=tk.WORD, 
                                                    bg='#2d2d2d', fg='white')
        logs_text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        logs_text_widget.insert('1.0', self.logs_text.get('1.0', tk.END))
        logs_text_widget.config(state='disabled')
        
    def update_status(self, message):
        """Mettre √† jour le statut"""
        self.status_label.config(text=message)
        
    def log_message(self, message):
        """Ajouter un message aux logs"""
        timestamp = time.strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.logs_text.insert(tk.END, log_entry)
        self.logs_text.see(tk.END)
        
    def on_closing(self):
        """G√©rer la fermeture"""
        if self.mcp_system:
            self.mcp_system.stop()
        self.root.destroy()
        
    def run(self):
        """Lancer l'application"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage de la d√©monstration compl√®te...")
    
    try:
        app = DemoCompleteInterface()
        app.run()
        return True
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
