#!/usr/bin/env python3
"""
D√âMONSTRATION CONSOLE INTERACTIVE COMPL√àTE
Syst√®me Multi-Agent avec interface console riche
"""
import os
import sys
import time
import threading
from pathlib import Path
import json

try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich.progress import Progress, SpinnerColumn, TextColumn
    from rich.prompt import Prompt, Confirm
    from rich.text import Text
    from rich.layout import Layout
    from rich.live import Live
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False
    print("‚ö†Ô∏è Rich non disponible - Interface console basique")

class DemoConsoleComplete:
    def __init__(self):
        if RICH_AVAILABLE:
            self.console = Console()
        
        self.mcp_system = None
        self.demo_data = {
            "files_analyzed": [],
            "search_results": [],
            "vault_password": "test123",
            "system_status": "Initialisation..."
        }
        
    def print_header(self, title):
        """Afficher un header format√©"""
        if RICH_AVAILABLE:
            self.console.print(Panel(title, style="bold blue"))
        else:
            print("=" * 70)
            print(f"üéØ {title}")
            print("=" * 70)
            
    def print_success(self, message):
        """Message de succ√®s"""
        if RICH_AVAILABLE:
            self.console.print(f"‚úÖ {message}", style="bold green")
        else:
            print(f"‚úÖ {message}")
            
    def print_error(self, message):
        """Message d'erreur"""
        if RICH_AVAILABLE:
            self.console.print(f"‚ùå {message}", style="bold red")
        else:
            print(f"‚ùå {message}")
            
    def print_info(self, message):
        """Message d'info"""
        if RICH_AVAILABLE:
            self.console.print(f"‚ÑπÔ∏è {message}", style="bold cyan")
        else:
            print(f"‚ÑπÔ∏è {message}")
            
    def init_mcp_system(self):
        """Initialiser le syst√®me MCP"""
        self.print_header("INITIALISATION DU SYST√àME MCP")
        
        try:
            # Import ici pour √©viter les erreurs
            sys.path.append(os.getcwd())
            
            # Cr√©er et configurer le syst√®me MCP manuellement
            self.mcp_system = self.create_mock_mcp_system()
            
            self.print_success("Syst√®me MCP initialis√© avec succ√®s")
            self.demo_data["system_status"] = "MCP Actif"
            return True
            
        except Exception as e:
            self.print_error(f"Erreur lors de l'initialisation MCP: {e}")
            self.demo_data["system_status"] = "MCP Indisponible"
            return False
            
    def create_mock_mcp_system(self):
        """Cr√©er un syst√®me MCP simul√© pour la d√©mo"""
        class MockMCPSystem:
            def __init__(self):
                self.active = True
                
            def start(self):
                self.active = True
                
            def stop(self):
                self.active = False
                
            def call_tool(self, agent, tool, params):
                # Simuler les r√©ponses des agents
                if tool == "process_directory":
                    return {
                        "success": True,
                        "files_processed": 5,
                        "sensitive_files": 2,
                        "processing_time": 1.2,
                        "files": [
                            {"name": "document_sensible.txt", "type": "text", "sensitive": True, "summary": "Document avec PII"},
                            {"name": "cours_histoire.txt", "type": "text", "sensitive": False, "summary": "Cours d'histoire moderne"},
                            {"name": "ordonnance_medicale.json", "type": "json", "sensitive": True, "summary": "Donn√©es m√©dicales"},
                            {"name": "bulletin_paie.txt", "type": "text", "sensitive": True, "summary": "Bulletin de salaire"},
                            {"name": "recette_cuisine.txt", "type": "text", "sensitive": False, "summary": "Recette de cuisine"}
                        ]
                    }
                elif tool == "smart_search":
                    query = params.get("query", "").lower()
                    results = []
                    
                    if "carte vitale" in query or "vitale" in query:
                        results.append({
                            "name": "document_sensible.txt",
                            "encrypted": True,
                            "confidence": 95,
                            "summary": "Document contenant des informations de carte vitale",
                            "id": "doc_001"
                        })
                    elif "histoire" in query:
                        results.append({
                            "name": "cours_histoire.txt",
                            "encrypted": False,
                            "confidence": 90,
                            "summary": "Cours d'histoire moderne - contenu √©ducatif",
                            "id": "doc_002"
                        })
                    elif "ordonnance" in query or "m√©dical" in query:
                        results.append({
                            "name": "ordonnance_medicale.json",
                            "encrypted": True,
                            "confidence": 92,
                            "summary": "Ordonnance m√©dicale personnelle",
                            "id": "doc_003"
                        })
                    elif "sensible" in query or "confidentiel" in query:
                        results.extend([
                            {
                                "name": "document_sensible.txt",
                                "encrypted": True,
                                "confidence": 88,
                                "summary": "Document contenant des donn√©es sensibles",
                                "id": "doc_001"
                            },
                            {
                                "name": "bulletin_paie.txt",
                                "encrypted": True,
                                "confidence": 85,
                                "summary": "Bulletin de paie avec donn√©es personnelles",
                                "id": "doc_004"
                            }
                        ])
                    
                    return {
                        "success": True,
                        "results": results
                    }
                elif tool == "decrypt_file":
                    file_id = params.get("file_id")
                    password = params.get("password")
                    
                    if password == "test123":
                        return {
                            "success": True,
                            "decrypted_path": f"temp_decrypted/{file_id}.txt",
                            "message": "Fichier d√©chiffr√© avec succ√®s"
                        }
                    else:
                        return {
                            "success": False,
                            "error": "Mot de passe incorrect"
                        }
                
                return {"success": False, "error": "Outil non reconnu"}
        
        return MockMCPSystem()
        
    def analyze_directory(self):
        """Analyser un r√©pertoire"""
        self.print_header("ANALYSE DE R√âPERTOIRE")
        
        # Demander le r√©pertoire
        if RICH_AVAILABLE:
            directory = Prompt.ask("üìÅ R√©pertoire √† analyser", default="test_files")
        else:
            directory = input("üìÅ R√©pertoire √† analyser [test_files]: ") or "test_files"
        
        if not os.path.exists(directory):
            self.print_error(f"R√©pertoire {directory} non trouv√©")
            return False
        
        # Simuler l'analyse avec progress bar
        if RICH_AVAILABLE:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("üîç Analyse en cours...", total=None)
                time.sleep(2)  # Simuler le traitement
        else:
            print("üîç Analyse en cours...")
            time.sleep(2)
        
        # Utiliser le syst√®me MCP
        if self.mcp_system:
            result = self.mcp_system.call_tool("Orchestrator", "process_directory", {"directory": directory})
            
            if result.get("success"):
                files_processed = result.get("files_processed", 0)
                sensitive_files = result.get("sensitive_files", 0)
                processing_time = result.get("processing_time", 0)
                
                self.print_success(f"Analyse termin√©e: {files_processed} fichiers trait√©s")
                
                # Afficher les r√©sultats dans un tableau
                if RICH_AVAILABLE:
                    table = Table(title="üìä R√©sultats de l'Analyse")
                    table.add_column("Fichier", style="cyan")
                    table.add_column("Type", style="magenta")
                    table.add_column("Statut", style="green")
                    table.add_column("R√©sum√©", style="yellow")
                    
                    for file_info in result.get("files", []):
                        status = "üîí Sensible" if file_info["sensitive"] else "üìÑ Public"
                        table.add_row(
                            file_info["name"],
                            file_info["type"],
                            status,
                            file_info.get("summary", "N/A")
                        )
                    
                    self.console.print(table)
                else:
                    print("\nüìä R√©sultats de l'Analyse:")
                    print("-" * 60)
                    for file_info in result.get("files", []):
                        status = "üîí Sensible" if file_info["sensitive"] else "üìÑ Public"
                        print(f"‚Ä¢ {file_info['name']} - {status}")
                        print(f"  {file_info.get('summary', 'N/A')}")
                
                # Sauvegarder les r√©sultats
                self.demo_data["files_analyzed"] = result.get("files", [])
                
                return True
            else:
                self.print_error(f"Erreur lors de l'analyse: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            self.print_error("Syst√®me MCP non disponible")
            return False
            
    def smart_search(self):
        """Recherche intelligente"""
        self.print_header("RECHERCHE INTELLIGENTE IA")
        
        # Exemples de recherche
        examples = [
            "trouve ma carte vitale",
            "cours d'histoire", 
            "ordonnance m√©dicale",
            "documents sensibles"
        ]
        
        if RICH_AVAILABLE:
            self.console.print("üí° Exemples de recherche:")
            for i, example in enumerate(examples, 1):
                self.console.print(f"  {i}. {example}")
            self.console.print()
            
            query = Prompt.ask("ü§ñ Votre recherche")
        else:
            print("üí° Exemples de recherche:")
            for i, example in enumerate(examples, 1):
                print(f"  {i}. {example}")
            print()
            
            query = input("ü§ñ Votre recherche: ")
        
        if not query:
            self.print_error("Requ√™te vide")
            return False
        
        # Simuler l'analyse IA
        if RICH_AVAILABLE:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("üß† Analyse IA du prompt...", total=None)
                time.sleep(1)
        else:
            print("üß† Analyse IA du prompt...")
            time.sleep(1)
        
        # Utiliser le syst√®me MCP pour la recherche
        if self.mcp_system:
            result = self.mcp_system.call_tool("Orchestrator", "smart_search", {"query": query})
            
            if result.get("success"):
                results = result.get("results", [])
                
                if results:
                    self.print_success(f"{len(results)} r√©sultat(s) trouv√©(s)")
                    
                    # Afficher les r√©sultats
                    if RICH_AVAILABLE:
                        table = Table(title="üéØ R√©sultats de Recherche")
                        table.add_column("Fichier", style="cyan")
                        table.add_column("Confiance", style="green")
                        table.add_column("Statut", style="red")
                        table.add_column("Description", style="yellow")
                        
                        for file_result in results:
                            confidence = f"{file_result.get('confidence', 0)}%"
                            status = "üîí Chiffr√©" if file_result.get('encrypted') else "üìÑ Public"
                            table.add_row(
                                file_result['name'],
                                confidence,
                                status,
                                file_result.get('summary', 'N/A')
                            )
                        
                        self.console.print(table)
                    else:
                        print("\nüéØ R√©sultats de Recherche:")
                        print("-" * 60)
                        for i, file_result in enumerate(results, 1):
                            confidence = file_result.get('confidence', 0)
                            status = "üîí Chiffr√©" if file_result.get('encrypted') else "üìÑ Public"
                            print(f"{i}. {file_result['name']} - {status}")
                            print(f"   Confiance: {confidence}%")
                            print(f"   {file_result.get('summary', 'N/A')}")
                            print()
                    
                    # Proposer l'acc√®s aux fichiers
                    for file_result in results:
                        if file_result.get('encrypted'):
                            if RICH_AVAILABLE:
                                access = Confirm.ask(f"üîê Acc√©der √† {file_result['name']} (authentification requise)?")
                            else:
                                access = input(f"üîê Acc√©der √† {file_result['name']} (o/n)? ").lower().startswith('o')
                            
                            if access:
                                self.decrypt_file(file_result)
                        else:
                            self.print_info(f"üìÇ {file_result['name']} est accessible directement")
                    
                    return True
                else:
                    self.print_error("Aucun r√©sultat trouv√©")
                    return False
            else:
                self.print_error(f"Erreur de recherche: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            self.print_error("Syst√®me MCP non disponible")
            return False
            
    def decrypt_file(self, file_result):
        """D√©chiffrer un fichier"""
        self.print_info(f"üîê Acc√®s au fichier sensible: {file_result['name']}")
        
        if RICH_AVAILABLE:
            password = Prompt.ask("Mot de passe", password=True)
        else:
            import getpass
            password = getpass.getpass("Mot de passe: ")
        
        if self.mcp_system:
            result = self.mcp_system.call_tool("Security", "decrypt_file", {
                "file_id": file_result['id'],
                "password": password
            })
            
            if result.get("success"):
                self.print_success("Fichier d√©chiffr√© avec succ√®s!")
                self.print_info(f"üìÅ Emplacement: {result.get('decrypted_path', 'temp_decrypted/')}")
                
                # Proposer d'ouvrir le fichier
                if RICH_AVAILABLE:
                    open_file = Confirm.ask("üìÇ Ouvrir le fichier?")
                else:
                    open_file = input("üìÇ Ouvrir le fichier (o/n)? ").lower().startswith('o')
                
                if open_file:
                    self.print_info("üìÑ Simulation de l'ouverture du fichier...")
                    self.print_info("Contenu: [DONN√âES D√âCHIFFR√âES - CONFIDENTIEL]")
                
            else:
                self.print_error("Mot de passe incorrect")
        else:
            self.print_error("Syst√®me MCP non disponible")
            
    def show_system_status(self):
        """Afficher le statut du syst√®me"""
        self.print_header("STATUT DU SYST√àME")
        
        if RICH_AVAILABLE:
            table = Table(title="üñ•Ô∏è √âtat des Composants")
            table.add_column("Composant", style="cyan")
            table.add_column("Statut", style="green")
            table.add_column("Description", style="yellow")
            
            table.add_row("MCP System", "‚úÖ Actif" if self.mcp_system else "‚ùå Inactif", "Syst√®me multi-agents")
            table.add_row("Agent NLP", "‚úÖ Op√©rationnel", "Traitement de texte et PII")
            table.add_row("Agent Vision", "‚úÖ Op√©rationnel", "Analyse d'images")
            table.add_row("Agent Audio", "‚úÖ Op√©rationnel", "Traitement audio")
            table.add_row("Agent Security", "‚úÖ Op√©rationnel", "Chiffrement et s√©curit√©")
            table.add_row("File Manager", "‚úÖ Op√©rationnel", "Gestion de fichiers")
            table.add_row("Vault", "üîí S√©curis√©", "Stockage chiffr√©")
            table.add_row("IA Llama3", "ü§ñ Simul√©", "Traitement langage naturel")
            
            self.console.print(table)
        else:
            print("üñ•Ô∏è √âtat des Composants:")
            print("-" * 60)
            print(f"MCP System      : {'‚úÖ Actif' if self.mcp_system else '‚ùå Inactif'}")
            print(f"Agent NLP       : ‚úÖ Op√©rationnel")
            print(f"Agent Vision    : ‚úÖ Op√©rationnel") 
            print(f"Agent Audio     : ‚úÖ Op√©rationnel")
            print(f"Agent Security  : ‚úÖ Op√©rationnel")
            print(f"File Manager    : ‚úÖ Op√©rationnel")
            print(f"Vault           : üîí S√©curis√©")
            print(f"IA Llama3       : ü§ñ Simul√©")
            
    def show_help(self):
        """Afficher l'aide"""
        help_text = """
üÜò AIDE - SYST√àME MULTI-AGENT KACM QUALCOMM

üéØ OBJECTIF:
D√©montrer un syst√®me multi-agent intelligent pour l'analyse
et la s√©curisation automatique de documents avec IA.

üéÆ FONCTIONNALIT√âS:

1. üìÅ ANALYSE DE R√âPERTOIRE
   ‚Ä¢ Scan automatique des fichiers
   ‚Ä¢ D√©tection PII intelligente
   ‚Ä¢ Classification sensible/public
   ‚Ä¢ Chiffrement automatique

2. ü§ñ RECHERCHE IA
   ‚Ä¢ Requ√™tes en langage naturel
   ‚Ä¢ Analyse d'intention par IA
   ‚Ä¢ R√©sultats pertinents
   ‚Ä¢ Authentification pour fichiers sensibles

3. üîê S√âCURIT√â
   ‚Ä¢ Chiffrement automatique
   ‚Ä¢ Vault s√©curis√©
   ‚Ä¢ Authentification par mot de passe
   ‚Ä¢ Audit trail complet

üîë INFORMATIONS IMPORTANTES:
‚Ä¢ Mot de passe vault: test123
‚Ä¢ R√©pertoire de test: test_files/
‚Ä¢ Types support√©s: TXT, JSON, PDF, Images, Audio

üé™ EXEMPLES DE D√âMONSTRATION:
‚Ä¢ "trouve ma carte vitale" ‚Üí Fichier sensible + auth
‚Ä¢ "cours d'histoire" ‚Üí Fichier public + acc√®s direct
‚Ä¢ "documents sensibles" ‚Üí Liste tous les fichiers chiffr√©s

üîß ARCHITECTURE:
Interface Console ‚Üî MCP System ‚Üî Agents (NLP, Vision, Audio, Security)
"""
        
        if RICH_AVAILABLE:
            self.console.print(Panel(help_text, title="üÜò AIDE", border_style="blue"))
        else:
            print(help_text)
            
    def main_menu(self):
        """Menu principal"""
        while True:
            self.print_header("SYST√àME MULTI-AGENT - KACM QUALCOMM")
            
            if RICH_AVAILABLE:
                self.console.print("üéÆ MENU PRINCIPAL", style="bold magenta")
                self.console.print("1. üìÅ Analyser un r√©pertoire")
                self.console.print("2. ü§ñ Recherche intelligente")
                self.console.print("3. üñ•Ô∏è Statut du syst√®me")
                self.console.print("4. üÜò Aide")
                self.console.print("5. üö™ Quitter")
                self.console.print()
                
                choice = Prompt.ask("Votre choix", choices=["1", "2", "3", "4", "5"])
            else:
                print("üéÆ MENU PRINCIPAL")
                print("1. üìÅ Analyser un r√©pertoire")
                print("2. ü§ñ Recherche intelligente")
                print("3. üñ•Ô∏è Statut du syst√®me")
                print("4. üÜò Aide")
                print("5. üö™ Quitter")
                print()
                
                choice = input("Votre choix (1-5): ")
            
            if choice == "1":
                self.analyze_directory()
            elif choice == "2":
                self.smart_search()
            elif choice == "3":
                self.show_system_status()
            elif choice == "4":
                self.show_help()
            elif choice == "5":
                self.print_info("Au revoir!")
                break
            else:
                self.print_error("Choix invalide")
            
            if RICH_AVAILABLE:
                Prompt.ask("\nAppuyez sur Entr√©e pour continuer", default="")
            else:
                input("\nAppuyez sur Entr√©e pour continuer...")
                
    def run(self):
        """Lancer la d√©monstration"""
        try:
            # Initialiser le syst√®me
            self.init_mcp_system()
            
            # Lancer le menu principal
            self.main_menu()
            
        except KeyboardInterrupt:
            self.print_info("\nüî¥ Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            self.print_error(f"Erreur inattendue: {e}")
        finally:
            if self.mcp_system:
                self.mcp_system.stop()
                self.print_info("üî¥ Syst√®me MCP arr√™t√©")

def main():
    """Fonction principale"""
    demo = DemoConsoleComplete()
    demo.run()

if __name__ == "__main__":
    main()
