#!/usr/bin/env python3
"""
Interface Interactive MCP - Version Corrig√©e
============================================

Interface interactive simplifi√©e et corrig√©e pour tester le syst√®me MCP multi-agents.
D√©tecte TOUS les fichiers et les traite correctement.
"""

import os
import sys
import time
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime
import json
import hashlib
import mimetypes
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.prompt import Prompt, Confirm
from rich.text import Text

# Configuration Rich Console
console = Console()

@dataclass
class FileAnalysis:
    """R√©sultat d'analyse d'un fichier"""
    file_path: str
    file_name: str
    file_type: str
    size: int
    agent_used: str
    summary: str
    pii_detected: List[str]
    warning_level: str
    processing_time: float

class SimpleMCPDemo:
    """D√©monstration MCP simplifi√©e et corrig√©e"""
    
    def __init__(self):
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.files_analyzed = []
        
        # Types de fichiers support√©s
        self.file_types = {
            '.txt': ('text', 'nlp'),
            '.md': ('text', 'nlp'),
            '.json': ('text', 'nlp'),
            '.csv': ('text', 'nlp'),
            '.pdf': ('document', 'nlp'),
            '.docx': ('document', 'nlp'),
            '.doc': ('document', 'nlp'),
            '.jpg': ('image', 'vision'),
            '.jpeg': ('image', 'vision'),
            '.png': ('image', 'vision'),
            '.gif': ('image', 'vision'),
            '.bmp': ('image', 'vision'),
            '.mp3': ('audio', 'audio'),
            '.wav': ('audio', 'audio'),
            '.m4a': ('audio', 'audio'),
            '.ogg': ('audio', 'audio')
        }
        
        # Mots-cl√©s sensibles
        self.sensitive_keywords = [
            'sensible', 'secret', 'confidentiel', 'prive', 'carte', 'bancaire',
            'iban', 'passeport', 'cni', 'ordonnance', 'medical', 'paie',
            'bulletin', 'visa', 'mastercard', 'amex'
        ]
    
    def show_header(self):
        """Affiche l'en-t√™te"""
        console.clear()
        header = Text("üéØ SYST√àME MCP MULTI-AGENTS - D√âMONSTRATION INTERACTIVE", style="bold blue")
        console.print(Panel(header, style="blue"))
        console.print(f"Session: {self.session_id}\n")
    
    def scan_directory(self, directory: str) -> List[str]:
        """Scanne un r√©pertoire et retourne tous les fichiers"""
        files_found = []
        
        try:
            dir_path = Path(directory)
            if not dir_path.exists():
                console.print(f"‚ùå R√©pertoire inexistant: {directory}", style="red")
                return files_found
            
            console.print(f"üîç Scan du r√©pertoire: {directory}")
            
            # Scan r√©cursif
            for item in dir_path.rglob('*'):
                if item.is_file():
                    extension = item.suffix.lower()
                    if extension in self.file_types:
                        files_found.append(str(item))
                        console.print(f"  ‚úÖ Fichier d√©tect√©: {item.name} ({extension})")
            
            console.print(f"üìä Total: {len(files_found)} fichiers d√©tect√©s\n")
            return files_found
            
        except Exception as e:
            console.print(f"‚ùå Erreur lors du scan: {e}", style="red")
            return files_found
    
    def analyze_file(self, file_path: str) -> FileAnalysis:
        """Analyse un fichier"""
        
        start_time = time.time()
        
        # Informations de base
        path_obj = Path(file_path)
        file_name = path_obj.name
        file_size = path_obj.stat().st_size if path_obj.exists() else 0
        extension = path_obj.suffix.lower()
        
        # D√©termination du type et de l'agent
        if extension in self.file_types:
            file_type, agent_used = self.file_types[extension]
        else:
            file_type, agent_used = 'other', 'nlp'
        
        # Simulation du traitement
        processing_times = {'nlp': 0.3, 'vision': 0.8, 'audio': 1.5}
        time.sleep(processing_times.get(agent_used, 0.3) * 0.1)  # Simulation rapide
        
        # D√©tection PII bas√©e sur le nom de fichier
        pii_detected = []
        warning_level = 'safe'
        
        file_name_lower = file_name.lower()
        for keyword in self.sensitive_keywords:
            if keyword in file_name_lower:
                pii_detected.append(keyword.upper())
                warning_level = 'critical'
        
        # Analyse du contenu pour les fichiers texte
        if file_type == 'text' and path_obj.exists():
            try:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()[:500]  # Lecture partielle
                    
                # D√©tection simple de patterns
                import re
                patterns = {
                    'EMAIL': r'[\w\.-]+@[\w\.-]+\.\w+',
                    'PHONE': r'[\d\s\-\+\(\)]{10,}',
                    'CARD': r'\b\d{4}[\s\-]?\d{4}[\s\-]?\d{4}[\s\-]?\d{4}\b'
                }
                
                for pii_type, pattern in patterns.items():
                    if re.search(pattern, content):
                        pii_detected.append(pii_type)
                        warning_level = 'critical'
                        
            except Exception:
                pass
        
        # G√©n√©ration du r√©sum√©
        summary = f"Fichier {file_type} analys√© par l'agent {agent_used}"
        if pii_detected:
            summary += f" - PII d√©tect√©es: {', '.join(pii_detected)}"
        
        end_time = time.time()
        
        return FileAnalysis(
            file_path=file_path,
            file_name=file_name,
            file_type=file_type,
            size=file_size,
            agent_used=agent_used,
            summary=summary,
            pii_detected=pii_detected,
            warning_level=warning_level,
            processing_time=end_time - start_time
        )
    
    def process_directory(self, directory: str):
        """Traite un r√©pertoire complet"""
        
        self.show_header()
        
        # 1. Scan du r√©pertoire
        files_found = self.scan_directory(directory)
        
        if not files_found:
            console.print("‚ùå Aucun fichier support√© trouv√©", style="red")
            return
        
        # 2. Analyse des fichiers
        console.print("üîÑ Analyse des fichiers en cours...\n")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TaskProgressColumn(),
            console=console
        ) as progress:
            
            task = progress.add_task("Analyse...", total=len(files_found))
            
            for file_path in files_found:
                analysis = self.analyze_file(file_path)
                self.files_analyzed.append(analysis)
                
                progress.update(task, advance=1, description=f"Analyse: {analysis.file_name}")
        
        # 3. Affichage des r√©sultats
        self.show_results()
    
    def show_results(self):
        """Affiche les r√©sultats"""
        
        console.print("\nüìä R√âSULTATS D'ANALYSE", style="bold cyan")
        
        # Statistiques
        total_files = len(self.files_analyzed)
        sensitive_files = len([f for f in self.files_analyzed if f.warning_level != 'safe'])
        safe_files = total_files - sensitive_files
        
        stats_table = Table(title="üìà Statistiques")
        stats_table.add_column("M√©trique", style="cyan")
        stats_table.add_column("Valeur", style="white")
        
        stats_table.add_row("Total des fichiers", str(total_files))
        stats_table.add_row("Fichiers sensibles", str(sensitive_files))
        stats_table.add_row("Fichiers s√ªrs", str(safe_files))
        
        console.print(stats_table)
        
        # R√©partition par type
        type_counts = {}
        agent_counts = {}
        
        for analysis in self.files_analyzed:
            type_counts[analysis.file_type] = type_counts.get(analysis.file_type, 0) + 1
            agent_counts[analysis.agent_used] = agent_counts.get(analysis.agent_used, 0) + 1
        
        console.print("\nüìã R√©partition par type:")
        for file_type, count in type_counts.items():
            console.print(f"  {file_type}: {count} fichiers")
        
        console.print("\nü§ñ R√©partition par agent:")
        for agent, count in agent_counts.items():
            console.print(f"  Agent {agent}: {count} fichiers")
        
        # Fichiers d√©taill√©s
        console.print("\nüìÑ D√©tails des fichiers:")
        
        details_table = Table()
        details_table.add_column("Fichier", style="cyan")
        details_table.add_column("Type", style="white")
        details_table.add_column("Agent", style="yellow")
        details_table.add_column("Statut", style="green")
        details_table.add_column("PII", style="red")
        
        for analysis in self.files_analyzed:
            status = "‚ö†Ô∏è SENSIBLE" if analysis.warning_level != 'safe' else "‚úÖ SAFE"
            pii_text = ", ".join(analysis.pii_detected) if analysis.pii_detected else "Aucune"
            
            details_table.add_row(
                analysis.file_name,
                analysis.file_type,
                analysis.agent_used,
                status,
                pii_text
            )
        
        console.print(details_table)
        
        # Fichiers sensibles
        sensitive_files = [f for f in self.files_analyzed if f.warning_level != 'safe']
        if sensitive_files:
            console.print("\n‚ö†Ô∏è FICHIERS SENSIBLES D√âTECT√âS:", style="bold red")
            for analysis in sensitive_files:
                console.print(f"  ‚Ä¢ {analysis.file_name} - {analysis.summary}")
    
    def save_report(self):
        """Sauvegarde le rapport"""
        
        report_data = {
            'session_id': self.session_id,
            'timestamp': datetime.now().isoformat(),
            'total_files': len(self.files_analyzed),
            'sensitive_files': len([f for f in self.files_analyzed if f.warning_level != 'safe']),
            'analysis_results': [
                {
                    'file_name': a.file_name,
                    'file_type': a.file_type,
                    'agent_used': a.agent_used,
                    'warning_level': a.warning_level,
                    'pii_detected': a.pii_detected,
                    'summary': a.summary,
                    'processing_time': a.processing_time
                }
                for a in self.files_analyzed
            ]
        }
        
        report_file = f"rapport_mcp_{self.session_id}.json"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            console.print(f"\n‚úÖ Rapport sauvegard√©: {report_file}", style="green")
            
        except Exception as e:
            console.print(f"‚ùå Erreur sauvegarde: {e}", style="red")
    
    def run(self):
        """Lance la d√©monstration"""
        
        try:
            self.show_header()
            
            console.print("üéØ D√âMONSTRATION SYST√àME MCP MULTI-AGENTS", style="bold green")
            console.print("=" * 60)
            
            # R√©pertoires disponibles
            available_dirs = [
                "test_files",
                ".",
                "../agents/vision/test_images"
            ]
            
            console.print("\nüìÅ R√©pertoires disponibles:")
            for i, dir_path in enumerate(available_dirs, 1):
                exists = "‚úÖ" if Path(dir_path).exists() else "‚ùå"
                console.print(f"{i}. {exists} {dir_path}")
            
            console.print(f"{len(available_dirs) + 1}. Sp√©cifier un r√©pertoire")
            
            choice = Prompt.ask("S√©lectionnez un r√©pertoire", choices=[str(i) for i in range(1, len(available_dirs) + 2)])
            
            if choice == str(len(available_dirs) + 1):
                directory = Prompt.ask("Chemin du r√©pertoire")
            else:
                directory = available_dirs[int(choice) - 1]
            
            # Traitement du r√©pertoire
            self.process_directory(directory)
            
            # Sauvegarde du rapport
            if Confirm.ask("\nSauvegarder le rapport?"):
                self.save_report()
            
            console.print("\nüéâ D√©monstration termin√©e!", style="bold green")
            
        except KeyboardInterrupt:
            console.print("\nüëã D√©monstration interrompue", style="yellow")
        except Exception as e:
            console.print(f"‚ùå Erreur: {e}", style="red")

if __name__ == "__main__":
    demo = SimpleMCPDemo()
    demo.run()
